@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Sub producto de clientes";

}

<script>

    function onsave(e) {
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddProductType() {
        debugger
        var dataObject = {
            ProductTypeId: 0
        };

         $.ajax({
            url: '@Url.Action("pvwAddProductType", "ProductType")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                //console.log('success', result)

                $("#numProductType").html('');
                $("#numProductType").html(result);


                //$("#btnCAI").hide();
                $('#ModalProductType').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }


         function EditProductType(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
             var dataObject = {
                 ProductTypeId: dataItem.ProductTypeId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddProductType", "ProductType")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                   // console.log('success', result)
                    $("#numProductType").html('');
                    $("#numProductType").html(result);

                    //$("#btnCAI").hide();
                    $('#ModalProductType').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }

       //funcion para eliminar
    function Delete(e) {
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            debugger
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            $.ajax({
               url: '@Url.Action("Delete", "ProductType")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                //data: { Id: dataItem.UnitOfMeasureId },
                success: function (data) {
                    var grid = $("#gridProductType").data("kendoGrid");
                    grid.dataSource.remove(dataItem);
                    $("#titulo").text("Eliminar Tipo Producto");
                },
                 error: function (XMLHttpRequest, textStatus, errorThrown) {
                     swal("Error", textStatus, "error");
                  }
            });
        }
    }
</script>

<h3 class="text-themecolor">Tipo de producto</h3>

@(Html.Kendo().Grid<ERPMVC.Models.ProductType>
                          ()

                            .Name("gridProductType")

                            .Columns(columns =>
                            {
                                columns.Command(command =>
                                {
                                    command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditProductType");
                                    command.Custom("Eliminar").Click("Delete").IconClass("fa fa-trash").Text(" ");
                                }).Width(150).Title("Acciones");
                                columns.Bound(p => p.ProductTypeId).Width(150).Title("N°");
                                columns.Bound(p => p.ProductTypeName).Width(170).Title("Nombre");
                                columns.Bound(p => p.Description).Width(200).Title("Descripción");
                                columns.Bound(p => p.Estado).Width(200).Title("Estado");

                            })


                            .ToolBar(tools =>
                            {

                    //tools.Create();
                    tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                  .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddProductType()" });
                                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                            })
                            .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                            .Sortable()
                            .Pageable()
                            .Filterable()
                            .Scrollable()
                            .Pdf(pdf => pdf.FileName("ProductTypeReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                            .Excel(excel => excel.FileName("ProductTypeReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                            .DataSource(dataSource =>
                            dataSource
                            .WebApi()

                            .ServerOperation(true)
                            .Model(model =>
                            {
                                model.Id(p => p.ProductTypeId);
                                model.Field(p => p.ProductTypeId).Editable(false);


                            })
                            .Events(events => events.Error("error_handler"))
                            .Read(read => read.Action("Get", "ProductType").Data("ProductType"))
                           //.Create(create => create.Action("Insert", "Product").Type(HttpVerbs.Post))
                           //.Update(update => update.Action("Update", "Product").Type(HttpVerbs.Post))
                           .Destroy(destroy => destroy.Action("Delete", "ProductType").Type(HttpVerbs.Post))
                            )
                            .Events(e =>
                            {
                                e.Save("onsave");

                            })
)

<script>
    function ProductType() {
        return { ProductTypeId: 2 };
    }
    
        //para los tools tips
        function setToolbarTooltip(btn_cl, btn_tooltip) {
            $("#gridProductType").kendoTooltip({
                filter: btn_cl,
                content: btn_tooltip
            });
        }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridProductType").kendoTooltip({
                filter: btn_cl,
                content: btn_tooltip
            });
        }
        setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
        //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
        setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");
        setRowButtonTooltip(".k-grid-Imprimir", "Imprimir");
        setRowButtonTooltip(".k-grid-ImprimirBoletaDeSalida", "Imprimir Boleta de salida");
        setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>



<div id="numProductType">
    @await Html.PartialAsync("pvwAddProductType", new ERPMVC.DTO.ProductTypeDTO { ProductTypeId = 0 })
</div>

