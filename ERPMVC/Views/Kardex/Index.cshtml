

<script>
       function ImprimirKardex(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));    
           var url = '@Url.Action("SFKardex", "Kardex")/' + dataItem.KardexId;
           var win = window.open(url, '_blank');
           win.focus();
    }


</script>

<h3 class="text-themecolor">Kardex</h3>

@(Html.Kendo().Grid<ERPMVC.Models.KardexLine>()
                              .Name("gridKardex")
                              .Columns(columns =>
                              {
                                  columns.Command(command =>
                                  {
                                      // command.Custom("Editar").Click("EditCertificadoDeposito");
                                      command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirKardex");
                                      //  command.Edit(); command.Destroy();
                                  }).Width(100).Title("Acciones");

                                  columns.Bound(p => p.KardexId).Title("Id").Width(150);
                                  columns.Bound(p => p.DocumentDate).Format("{0:dd/MM/yyyy}").Title("Fecha Documento").Width(150);
                                 // columns.Bound(p => p.KardexDate).Format("{0:dd/MM/yyyy}").Title("Fecha de Kardex").Width(150);
                                  columns.Bound(p => p.BranchName).Title("Sucursal").Width(150);
                                  columns.Bound(p => p.ProductName).Title("Producto").Width(150);
                                  columns.Bound(p => p.SubProductName).Title("SubProducto").Width(150);
                                  columns.Bound(p => p.Total).Title("Total").Width(150);
                                  
                              })
                                  .Filterable(f => f.Operators(o => o.ForString(s => s
                                           .Clear()
                                           .Contains("Contiene")
                                           .DoesNotContain("No contiene")
                                           .EndsWith("Termina con")
                                           .IsEqualTo("Es igual a")
                                           .IsNotEqualTo("No es igual a")
                                           .IsNull("Es nulo")
                                           .StartsWith("Inicia con")


                                     )
                                     .ForNumber(n => n
                                       .Clear()
                                       .IsEqualTo("Es igual a")
                                       .IsGreaterThan("Es mayor que")
                                       .IsLessThan("Es menor que")
                                       .IsNull("Es nulo")
                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     )
                                     .ForDate(d => d
                                     .Clear()
                                     .IsEqualTo("Es igual que")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     .IsNotEqualTo("No es igual que")
                                      )
                                   ))
                              .ToolBar(tools =>
                              {
                                  // tools.Create();
                                  //tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                  //           .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCertificadoDeposito();" });

                                  tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                  tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                              })
                               .Editable(e => e.Mode(GridEditMode.PopUp))
                                .Sortable()
                                .AutoBind(true)
                                .Pageable()
                                .Filterable()
                                .Scrollable()
                                // .ClientDetailTemplateId("template")
                                .Pdf(pdf => pdf.FileName("CertificadoDepositoReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                  .Excel(excel => excel.FileName("CertificadoDepositoReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                //.Events(e=>e.Save("onsave"))
                                .DataSource(dataSource =>

                               dataSource
                               //.Ajax()
                               .WebApi()
                                .ServerOperation(true)
                                .Model(model =>
                                {
                                    model.Id(p => p.KardexLineId);
                                    model.Field(p => p.KardexLineId).Editable(true);
                                    model.Field(p => p.KardexId).Editable(true);


                                })
                                .Events(events =>
                                {
                                    events.Error("error_handler");
                                    //events.upda("EditHandler");

                                })
                                .Read(read => read.Action("Get", "KardexLine"))
                                .Create(create => create.Action("Insert", "KardexLine"))
                                .Update(update => update.Action("Update", "KardexLine", new { id = "{0}" }))
                                .Destroy(destroy => destroy.Action("Delete", "KardexLine", new { id = "{0}" }))
                          )
)