@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Roles Politica";

}

<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }


    function AddPolicyRoles() {



        $('#ModalPolicyRoles').find(':input').not(':submit').val('');

        $('#ModalPolicyRoles').modal('show');
        $("#Id").val('00000000-0000-0000-0000-000000000000');




    }


         function EditCAI(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                Id: dataItem.Id,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddPolicyRoles", "PolicyRoles")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#numPolicyRoles").html('');
                    $("#numPolicyRoles").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalPolicyRoles').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }

    function RefreshGridPolicyRoles() {
        var grid = $("#gridPolicyRoles").getKendoGrid();
        grid.dataSource.read();
    }



</script>

<h3 class="text-themecolor">Roles Politica</h3>

@(Html.Kendo().Grid<ERPMVC.Models.PolicyRoles>
              ()

                .Name("gridPolicyRoles")

                .Columns(columns =>
                {

                    columns.Command(command =>
                    {
                        //command.Custom("Ver detalles").Click("Detalles");
                        command.Custom("Editar").Click("EditCAI").IconClass("fa fa-edit").Text(" ");
                        command.Destroy().Text(" ").IconClass("fa fa-trash");
                    }).Width(250).Title("Acciones");
                    columns.Bound(p => p.Id).Width(250);
                    columns.Bound(p => p.IdPolicy).Width(250);
                    columns.Bound(p => p.IdRol).Width(250);
                    columns.Bound(p => p.Estado).Width(200);

                    //columns.Bound(p => p.UsuarioCreacion).Width(170);
                    //columns.Bound(p => p.UsuarioModificacion).Width(190);


                })
                    .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))

                .ToolBar(tools =>
                {

                    //tools.Create();
                    tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                              .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddPolicyRoles()" });
                    tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                    tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                })
                .Editable(e => e.Mode(GridEditMode.PopUp))
                .Sortable()
                .Pageable()
                .Filterable()
                .Scrollable()
                .Pdf(pdf => pdf.FileName("PolicyRolesReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                .Excel(excel => excel.FileName("PolicyRolesReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                .DataSource(dataSource =>
                dataSource
                .WebApi()

                .ServerOperation(true)
                .Model(model =>
                {
                    model.Id(p => p.Id);
                    model.Field(p => p.Id).Editable(false);


                })
                .Events(events => events.Error("error_handler"))
                .Read(read => read.Action("Get", "PolicyRoles"))
                .Create(create => create.Action("Insert", "PolicyRoles").Type(HttpVerbs.Post))
                .Update(update => update.Action("Update", "PolicyRoles").Type(HttpVerbs.Post))
                .Destroy(destroy => destroy.Action("Delete", "PolicyRoles").Type(HttpVerbs.Post))

                )
                .Events(e =>
                {
                    e.Save("onsave");

                })
)
<script>
    //para los tools tips
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridPolicyRoles").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridPolicyRoles").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir");
    setRowButtonTooltip(".k-grid-ImprimirBoletaDeSalida", "Imprimir Boleta de salida");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>

<div id="numPolicyRoles">
    @await Html.PartialAsync("pvwAddPolicyRoles", new ERPMVC.DTO.PolicyRolesDTO { Id = new Guid("00000000-0000-0000-0000-000000000000") })
</div>