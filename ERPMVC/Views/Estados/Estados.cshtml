@using Kendo.Mvc.UI
@{
    ViewData["Title"] = "ESTADOS";
}


<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddEstados() {

          //$('#ModalEstado').find(':input').not(':submit').val('');
          $('#ModalEstado').modal('show');
          $("#IdEstado").val('0');
    }


         function EditEstado(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                IdEstado: dataItem.IdEstado,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddEstado", "Estados")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumEstados").html('');
                    $("#NumEstados ").html(result);


                    //$("#btnBlackListCustomers").hide();
                    $('#ModalEstado').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }

    function RefrescarGrid() {

        var grid = $("#gridEstados").getKendoGrid();
        grid.dataSource.read();

    }


   
    
</script>

<h3 class="text-themecolor">Estados</h3>
@(Html.Kendo().Grid<ERPMVC.Models.Estados>
    ()
    .Name("gridEstados")
    .Columns(columns =>
    {

        columns.Command(command =>
        {
            //command.Custom("Ver detalles").Click("Detalles");
            command.Custom("Editar").Click("EditEstado");
            command.Destroy().Text("Eliminar");
        }).Width(250);

        columns.Bound(p => p.IdEstado).Width(150).Title("No");
        columns.Bound(p => p.NombreEstado).Width(200).Title("Estado");
        columns.Bound(p => p.DescripcionEstado).Width(240).Title("Descripcion");
        columns.Bound(p => p.GrupoConfiguracion.Nombreconfiguracion).Width(200).Title("Grupo Configuracion");
        //columns.Bound(p => p.UsuarioCreacion).Width(230);
        //columns.Bound(p => p.UsuarioModificacion).Width(230);
        //columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy}").Width(190);
        //columns.Bound(p => p.FechaModificacion).Format("{0:dd/MM/yyyy}").Width(220);



    })
        .Filterable(f => f.Operators(o => o.ForString(s => s
                                       .Clear()
                                       .Contains("Contiene")
                                       .DoesNotContain("No contiene")
                                       .EndsWith("Termina con")
                                       .IsEqualTo("Es igual a")
                                       .IsNotEqualTo("No es igual a")
                                       .IsNull("Es nulo")
                                       .StartsWith("Inicia con")


                                 )
                                 .ForNumber(n => n
                                   .Clear()
                                   .IsEqualTo("Es igual a")
                                   .IsGreaterThan("Es mayor que")
                                   .IsLessThan("Es menor que")
                                   .IsNull("Es nulo")
                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                 )
                                 .ForDate(d => d
                                 .Clear()
                                 .IsEqualTo("Es igual que")
                                 .IsGreaterThan("Es mayor que")
                                 .IsLessThan("Es menor que")
                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                 .IsNotEqualTo("No es igual que")
                                  )
                               ))
    .ToolBar(tools =>
    {
        // tools.Create();
        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                               .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddEstados()" });
        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


    })
    .Editable(e => e.Mode(GridEditMode.PopUp))
    .Sortable()
    .Pageable()
    .Filterable()
    .Scrollable()
    .Pdf(pdf => pdf.FileName("EstadosReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
    .ProxyURL(Url.Action("Export", "Home")).AllPages())
        .Excel(excel => excel.FileName("EstadosReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
    .DataSource(dataSource =>
        dataSource
        .WebApi()

        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.IdEstado);
            model.Field(p => p.IdEstado).Editable(false);
            model.Field(p => p.FechaCreacion).Editable(true);
            model.Field(p => p.UsuarioCreacion).Editable(false);
            model.Field(p => p.UsuarioModificacion).Editable(false);

        })
        .Events(events => events.Error("error_handler"))
        .Read(read => read.Action("Get", "Estados"))
        .Create(create => create.Action("Insert", "Estados").Type(HttpVerbs.Post))
        .Update(update => update.Action("Update", "Estados", new { IdEstado = "{0}" }).Type(HttpVerbs.Put))
        .Destroy(destroy => destroy.Action("Delete", "Estados", new { IdEstado = "{0}" }).Type(HttpVerbs.Delete))

    )
    .Events(e =>
    {
        e.Save("onsave");

    })
    )

<div id="NumEstados">
    @await Html.PartialAsync("pvwAddEstado", new ERPMVC.Models.Estados { IdEstado = 0})
</div>