

<h3 class="text-themecolor">Teléfono</h3>
<script>

      @*function clearsession() {
            var dataObject = ["listadoproductos"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalCustomerPhones').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
          });
      }*@

    function AddCustomerPhones() {

              //clearsession();
             //console.log(mcustomerid);
        var mcustomerid = GetCustomerId();   

         var dataObject = {
             CustomerPhoneId: 0,
             CustomerId: mcustomerid.CustomerId,
             editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwCustomerPhones", "CustomerPhones")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#CustomerPhones").html('');
                $("#CustomerPhones").html(result);

                //var txt = $(result);
                //var found = $("#CustomerIdCPhone", txt);
                //var cc = $(found).val();
                //console.log(cc);

                //$("#CustomerIdCPhone").data("kendoDropDownList").value(cc);

                $('#myModalCustomerPhones').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }


    function EditCustomerPhones(e) {
        e.preventDefault();

       // clearsession();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            CustomerPhoneId: dataItem.CustomerPhoneId,
            editar : 0
        };

        $.ajax({
            url: '@Url.Action("pvwCustomerPhones", "CustomerPhones")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#CustomerPhones").html('');
                $("#CustomerPhones").html(result);

                $('#myModalCustomerPhones').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }


</script>

@(Html.Kendo().Grid<ERPMVC.Models.CustomerPhones>()
                      .Name("gridCustomerPhones")
                      .Columns(columns =>
                      {
                          columns.Command(command =>
                          {
                              command.Custom("Editar").Click("EditCustomerPhones");
                              // command.Custom("Ver detalles").Click("Detalles");
                              // command.Edit(); command.Destroy();
                          }).Width(170);
                          columns.Bound(p => p.CustomerPhoneId).Width(100);
                          //columns.Bound(p => p.CustomerId).Visible(false).Width(100);
                          columns.Bound(p => p.CustomerName).Width(100);
                          columns.Bound(p => p.Phone).Width(150);
                         

                      })
                          .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))
                      .ToolBar(tools =>
                      {
                          //tools.Create();
                          tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                        .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCustomerPhones();" });

                          tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                          tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                      })
                      .Editable(e => e.Mode(GridEditMode.PopUp))
                      .Sortable()
                      .Pageable()
                      .Filterable()
                      .Scrollable()
                      .Pdf(pdf => pdf.FileName("CustomerPhonesReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                       + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                       .ProxyURL(Url.Action("Export", "Home")).AllPages())
                         .Excel(excel => excel.FileName("CustomerPhonesReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                       + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                       .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                      .DataSource(dataSource =>
                          dataSource
                            .WebApi()
                            .ServerOperation(true)
                            .Model(model =>
                            {
                                model.Id(p => p.CustomerId);
                                model.Field(p => p.CustomerId).Editable(false);
                            })
                            .Events(events => events.Error("error_handler"))
                            .Read(read => read.Action("GetCustomerPhonesByCustomerId", "CustomerPhones").Data("GetCustomerId"))
                            .Create(create => create.Action("Insert", "CustomerPhones"))
                            .Update(update => update.Action("Update", "CustomerPhones", new { id = "{0}" }))
                            .Destroy(destroy => destroy.Action("Delete", "CustomerPhones", new { id = "{0}" }))
                      )
                        .Events(e =>
                        {
                            //e.Save("onsave");
                        })
)

<div id="CustomerPhones">
    @await Html.PartialAsync("pvwCustomerPhones", new ERPMVC.Models.CustomerPhones { CustomerPhoneId = 0 })
</div>