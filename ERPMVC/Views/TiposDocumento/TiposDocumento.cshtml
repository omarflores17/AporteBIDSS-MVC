@using Kendo.Mvc.UI
@{
    ViewData["Title"] = "Tipos de Documentos Fiscales";
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddTipoDocuemnto() {
        var validator = $("#frmTiposDocumentos").data("kendoValidator");
        validator.hideMessages();
        var x = document.getElementsByClassName("k-invalid");
        if (x.length > 0) {
            $("span").removeClass("k-invalid");
        }
        $('#ModalTiposDocumento').find(':input').not(':submit').val('');
        $('#ModalTiposDocumento').modal('show');
        $("#IdTipoDocumento").val('0');
        $("#IdEstado").data('kendoDropDownList').value(0);
    }

    
         function EditTipoDocumento(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                IdTipoDocumento: dataItem.IdTipoDocumento,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddTiposDocumentos", "TiposDocumento")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#numTipoDocumento").html('');
                    $("#numTipoDocumento").html(result);

                
                    //$("#btnTiposDocumento").hide();
                    $('#ModalTiposDocumento').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }

</script>

<h3 class="text-themecolor">Tipos Documentos Fiscales</h3>

@(Html.Kendo().Grid<ERPMVC.Models.TiposDocumento>
    ()
    .Name("gridTiposDocumento")
    .Columns(columns =>
    {
        columns.Command(command =>
        {
            //command.Custom("Ver detalles").Click("Detalles");
            command.Custom("Editar").Click("EditTipoDocumento").Text(" ").IconClass("fa fa-edit");
            //command.Destroy().Text("Eliminar");
        }).Title("Acciones").Width(100);

        columns.Bound(p => p.IdTipoDocumento).Width(170);
        columns.Bound(p => p.Codigo).Width(200);
        columns.Bound(p => p.Descripcion).Width(170);
        columns.Bound(p => p.Estado).Width(200);
        //columns.Bound(p => p.UsuarioModificacion).Width(200);

    })
    .ToolBar(tools =>
    {
        //tools.Create();
        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                      .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddTipoDocuemnto()" });
        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



    })
    .Editable(e => e.Mode(GridEditMode.PopUp))
    .Sortable()
    .Pageable()
    .Filterable()
    .Scrollable()
    .Pdf(pdf => pdf.FileName("Tipos Documento Fiscales Reporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
    .ProxyURL(Url.Action("Export", "Home")).AllPages())
    .Excel(excel => excel.FileName("Tipos Documento Fiscales Reporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
    .DataSource(dataSource =>
    dataSource
    .WebApi()

    .ServerOperation(true)
    .Model(model =>
    {
        model.Id(p => p.IdTipoDocumento);
        model.Field(p => p.IdTipoDocumento).Editable(false);
        model.Field(p => p.FechaCreacion).Editable(true);
        model.Field(p => p.FechaModificacion).Editable(true);
        model.Field(p => p.UsuarioCreacion).Editable(false);
        model.Field(p => p.UsuarioModificacion).Editable(false);

    })
    .Sort(s => s.Add(m => m.FechaCreacion).Descending())
    .Events(events => events.Error("error_handler"))
    .Read(read => read.Action("GetTiposDocumento", "TiposDocumento"))
    .Create(create => create.Action("Insert", "TiposDocumento"))
    .Update(update => update.Action("Update", "TiposDocumento", new { IdTipoDocumento = "{0}" }).Type(HttpVerbs.Put))
    .Destroy(destroy => destroy.Action("Delete", "TiposDocumento", new { IdTipoDocumento = "{0}" }).Type(HttpVerbs.Delete))

    )
    .Events(e =>
    {
        e.Save("onsave");

    })
    )
<div id="numTipoDocumento">
    @await Html.PartialAsync("pvwAddTiposDocumentos", new ERPMVC.DTO.TiposDocumentoDTO { IdTipoDocumento = 0 })
</div>

<script>
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridTiposDocumento").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridTiposDocumento").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    setRowButtonTooltip(".k-grid-delete", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>