
@{
    ViewData["Title"] = "Condiciones";
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaCreacion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaCreacion.toISOString('yyyy-MM-dd');
    }

</script>


@(Html.Kendo().Grid<ERPMVC.Models.Conditions>()
            .Name("gridCondition")
            .Columns(columns =>
            {
                columns.Bound(p => p.ConditionId).Width(100);
                columns.Bound(p => p.ConditionName).Width(150);
                columns.Bound(p => p.FechaCreacion).ClientTemplate("#= kendo.toString(kendo.parseDate(FechaCreacion), 'dd/MM/yyyy') #").Width(170);
                columns.Bound(p => p.FechaModificacion).ClientTemplate("#= kendo.toString(kendo.parseDate(FechaModificacion), 'dd/MM/yyyy') #").Width(170);
                columns.Command(command =>
                {
                    command.Edit().Text("Editar").UpdateText("Actualizar").CancelText("Cancelar");
                    command.Destroy().Text("Eliminar");
                }).Width(250);
            })
                .Filterable(f => f.Operators(o => o.ForString(s => s
                                       .Clear()
                                       .Contains("Contiene")
                                       .DoesNotContain("No contiene")
                                       .EndsWith("Termina con")
                                       .IsEqualTo("Es igual a")
                                       .IsNotEqualTo("No es igual a")
                                       .IsNull("Es nulo")
                                       .StartsWith("Inicia con")


                                 )
                                 .ForNumber(n => n
                                   .Clear()
                                   .IsEqualTo("Es igual a")
                                   .IsGreaterThan("Es mayor que")
                                   .IsLessThan("Es menor que")
                                   .IsNull("Es nulo")
                                   .IsLessThanOrEqualTo("Es menor o igual que")
                                   .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                 )
                                 .ForDate(d => d
                                 .Clear()
                                 .IsEqualTo("Es igual que")
                                 .IsGreaterThan("Es mayor que")
                                 .IsLessThan("Es menor que")
                                 .IsLessThanOrEqualTo("Es menor o igual que")
                                 .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                 .IsNotEqualTo("No es igual que")
                                  )
                               ))
            .ToolBar(tools =>
            {
                tools.Create();
                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



            })
            .Editable(e => e.Mode(GridEditMode.PopUp))
            .Sortable()
            .Pageable()
            .Filterable()
            .Scrollable()
            .Pdf(pdf => pdf.FileName("ConditionReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                .Excel(excel => excel.FileName("ConditionReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
            .DataSource(dataSource =>
                dataSource
                .WebApi()

                .ServerOperation(true)
                .Model(model =>
                {
                    model.Id(p => p.ConditionId);
                    model.Field(p => p.ConditionId).Editable(false);
                    model.Field(p => p.FechaCreacion).Editable(false);
                    model.Field(p => p.FechaModificacion).Editable(false);
                    model.Field(p => p.ConditionName).Editable(false);

                })
                .Events(events => events.Error("error_handler"))
                .Read(read => read.Action("Get", "Conditions"))
                .Create(create => create.Action("Insert", "Conditions").Type(HttpVerbs.Post).Data("caidata"))
                .Update(update => update.Action("Update", "Conditions", new { id = "{0}" }).Data("caidata"))
                .Destroy(destroy => destroy.Action("Delete", "Conditions", new { id = "{0}" }).Data("caidata"))

            )
            .Events(e =>
            {
                e.Save("onsave");

            })
)
