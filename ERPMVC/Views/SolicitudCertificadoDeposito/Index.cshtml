
<script>


    function clearsession() {
            var dataObject = ["listadoproductoscertificadodeposito"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }

    function AddSolicitudCertificadoDeposito() {
       // $('#myModalSalesOrder').find(':input').not(':submit').val('');
         //$('#myModalSalesOrder').modal('show');

         clearsession();

         var dataObject = {
            IdSCD: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwSolicitudCertificadoDeposito", "SolicitudCertificadoDeposito")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#salesorder").html('');
                $("#salesorder").html(result);

                //RefreshCertificadoDepositoDetail();
                 $("#btnSaveCotizacion").show();
                $('#myModalSolicitudCertificadoDeposito').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }

    function EditCertificadoDeposito(e) {
         e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            IdSCD: dataItem.IdSCD,
            editar : 0
        };

        clearsession();

        $.ajax({
            url: '@Url.Action("pvwSolicitudCertificadoDeposito", "SolicitudCertificadoDeposito")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#salesorder").html('');
                $("#salesorder").html(result);

              //  RefreshCotizacionesDetail();
                 $("#btnSaveCotizacion").hide();
                $('#myModalSolicitudCertificadoDeposito').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    function ImprimirCertificadoDeposito(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));


        window.location.href =  '@Url.Action("SFCertificadoDeposito", "CertificadoDeposito")/' + dataItem.SalesOrderId;




    }


    function closecondition() {
        $('#myModalConditions').modal('hide');
    }


</script>

<h3 class="text-themecolor">Solicitud Certificado de depósito</h3>

@(Html.Kendo().Grid<ERPMVC.Models.SolicitudCertificadoDeposito>()
                              .Name("gridSolicitudCertificadoDeposito")
                              .Columns(columns =>
                              {
                                  columns.Command(command =>
                                  {
                                      command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCertificadoDeposito");
                                      command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirCertificadoDeposito");
                          //  command.Edit(); command.Destroy();
                      }).Width(250);

                                  columns.Bound(p => p.IdSCD).Title("Id").Width(150);
                                  columns.Bound(p => p.FechaCertificado).Format("{0:dd/MM/yyyy}").Title("Fecha Certificado").Width(150);
                                  columns.Bound(p => p.FechaVencimiento).Format("{0:dd/MM/yyyy}").Title("Fecha de Vencimiento").Width(150);
                                  columns.Bound(p => p.CustomerName).Title("Cliente").Width(150);
                                  columns.Bound(p => p.ServicioName).Title("Servicio").Width(150);
                                  columns.Bound(p => p.WarehouseName).Title("Sucursal").Width(150);
                                  columns.Bound(p => p.NombreEmpresa).Title("Nombre empresa").Width(150);
                                  columns.Bound(p => p.NoPoliza).Title("NoPoliza").Width(150);

                      //columns.Bound(p => p.Total).Title("Total").Width(150);
                  })
                                  .Filterable(f => f.Operators(o => o.ForString(s => s
                                           .Clear()
                                           .Contains("Contiene")
                                           .DoesNotContain("No contiene")
                                           .EndsWith("Termina con")
                                           .IsEqualTo("Es igual a")
                                           .IsNotEqualTo("No es igual a")
                                           .IsNull("Es nulo")
                                           .StartsWith("Inicia con")


                                     )
                                     .ForNumber(n => n
                                       .Clear()
                                       .IsEqualTo("Es igual a")
                                       .IsGreaterThan("Es mayor que")
                                       .IsLessThan("Es menor que")
                                       .IsNull("Es nulo")
                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     )
                                     .ForDate(d => d
                                     .Clear()
                                     .IsEqualTo("Es igual que")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     .IsNotEqualTo("No es igual que")
                                      )
                                   ))
                              .ToolBar(tools =>
                              {
                      // tools.Create();
                      tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                 .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddSolicitudCertificadoDeposito();" });

                                  tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                                  tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });


                              })
                               .Editable(e => e.Mode(GridEditMode.PopUp))
                                .Sortable()
                                .AutoBind(true)
                                .Pageable()
                                .Filterable()
                                .Scrollable()
                                // .ClientDetailTemplateId("template")
                                .Pdf(pdf => pdf.FileName("CertificadoDepositoReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                  .Excel(excel => excel.FileName("CertificadoDepositoReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                //.Events(e=>e.Save("onsave"))
                                .DataSource(dataSource =>

                               dataSource
                               //.Ajax()
                               .WebApi()
                                .ServerOperation(true)
                                .Model(model =>
                                {
                                    model.Id(p => p.IdSCD);
                                    model.Field(p => p.IdSCD).Editable(true);
                                    model.Field(p => p.IdSCD).Editable(true);


                                })
                                .Events(events =>
                                {
                                    events.Error("error_handler");
                        //events.upda("EditHandler");

                    })
                                .Read(read => read.Action("Get", "SolicitudCertificadoDeposito"))
                                .Create(create => create.Action("Insert", "CertificadoDeposito"))
                                .Update(update => update.Action("Update", "CertificadoDeposito", new { id = "{0}" }))
                                .Destroy(destroy => destroy.Action("Delete", "CertificadoDeposito", new { id = "{0}" }))
                          )
)

<div id="salesorder">
    @await Html.PartialAsync("pvwSolicitudCertificadoDeposito", new ERPMVC.DTO.SolicitudCertificadoDepositoDTO { IdSCD = 0, FechaCertificado = DateTime.Now, FechaVencimiento = DateTime.Now.AddDays(60)
     , FechaVencimientoDeposito =DateTime.Now.AddDays(30) ,FechaFirma = DateTime.Now,  FechaInicioComputo=DateTime.Now, FechaPagoBanco=DateTime.Now })
</div>





<div id="ConditionView">
    @*  @await Html.PartialAsync("~/Views/Conditions/pvwConditions.cshtml", new ERPMVC.Models.Conditions { ConditionId = 0 });*@
</div>

<div id="CustomerConditionView">
</div>
