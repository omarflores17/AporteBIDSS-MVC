@model ERPMVC.DTO.SolicitudCertificadoDepositoDTO



<script>


    function GetSalesOrderId() {
        var subproductname = '', unidaddemedida = '';
        if ($("#UnitMeasureId") != null) {
            if ($("#UnitMeasureId").data("kendoDropDownList") != null) {
                unidaddemedida = $("#UnitMeasureId").data("kendoDropDownList").text();
            }
        }
        if ($("#SubProductId") != null) {
            if ($("#SubProductId").data("kendoDropDownList") != null) {
                subproductname = $("#SubProductId").data("kendoDropDownList").text();
            }
        }

            return {

                'IdSCD': @Model.IdSCD,
                'NoCD': $("#NoCD").val(),
                'CertificadoLineId': $("#CertificadoLineId").val(),
                'SubProductId': $("#SubProductId").val(),
                'SubProductName': subproductname,
                'Description': $("#DescriptionDetail").val(),
                'Quantity': $("#Quantity").val(),
                'Price': $("#Price").val(),
                'Amount': $("#Amount").val(),
                'UnitMeasureId': $("#UnitMeasureId").val(),
                'UnitMeasurName': unidaddemedida,
                'TotalCantidad': $("#TotalCantidad").val()

            }
        }

    function RefreshCertificadoDepositoDetail() {
        var grid = $("#gridSolicitudCertificadoDepositoDetail").getKendoGrid();
        grid.dataSource.read();
    }


    function AddCotizacionDetalle() {
        var notification = $("#notification").data("kendoNotification");
      //  console.log($("#ProductId").val());
        if ($("#ServicioId").val() !== '' && $("#ServicioId").val() !== '0'  ) {

            llenarsubproduct();
            $("#frmCertificadoDepositoLine :input").not('#SalesOrderId').prop("disabled", false);
            $('#TaxCode').val(0);
            $('#myModalSolicitudCertificadoDepositoLine').modal('show');
        } else {
            var notification = $("#notification").data("kendoNotification");
            notification.show({
                title: "Validacion",
                message: "Debe seleccionar un producto!"
            }, "error");

        }

    }

    function llenarsubproduct() {
        var combobox = $('#SubProductId').getKendoDropDownList();

        var dataObject = { 'ProductId': $("#ServicioId").val() };
              $.ajax({
                    url: '@Url.Action("GetSubProductByProductId", "ProductRelation")',
                    method: 'GET',
                    datatype: "json",
                    contentType: 'application/json',
                    async: false,
                    data: dataObject,
                    success: function (data) {
                        combobox.setDataSource(data);
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {

                      //  $("#btngenerarfactura").show();
                        notification.show({
                            title: "Validacion",
                            message: textStatus + ": " + XMLHttpRequest.responseText
                        }, "error");

                    }
                });
    }

    function EditCotizacionDetalle(e) {
        if ($("#ServicioId").val() !== '' && $("#ServicioId").val() !== '0') {
            e.preventDefault();
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            console.log(dataItem);
            var subproducto = 0;
            var dataObject = { 'CertificadoLineId': dataItem.CertificadoLineId };
            if (dataItem.CertificadoLineId > 0) {
                $.ajax({
                    url: '@Url.Action("pvwCertificadoDepositoDetailMant", "CertificadoLine")',
                    method: 'GET',
                    //datatype: "json",
                    contentType: 'application/json',
                    async: false,
                    //data: JSON.stringify(dataObject),
                    data: (dataObject),
                    success: function (data) {
                        $("#SalesOrderLineMant").html('');
                        $("#SalesOrderLineMant").html(data);
                        var txt = $(data);
                        var found = $("#SubProductId", txt);
                        subproducto = $(found).val();
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {

                        //  $("#btngenerarfactura").show();
                        notification.show({
                            title: "Validacion",
                            message: textStatus + ": " + XMLHttpRequest.responseText
                        }, "error");

                    }
                });

                $("#frmCertificadoDepositoLine :input").prop("disabled", true);
                llenarsubproduct();
                var combobox = $('#SubProductId').getKendoDropDownList();
                combobox.value(subproducto);
                combobox.trigger('change');

            }
            else {
                $("#IdSCD").val(0);
                $("#DescriptionDetail").val(dataItem.Description);
                var quantity = $("#Quantity").data("kendoNumericTextBox");
                quantity.value(dataItem.Quantity);
                quantity.trigger('change');

                var Price = $("#Price").data("kendoNumericTextBox");
                Price.value(dataItem.Price);
                Price.trigger('change');

                var Amount = $("#AmountLine").data("kendoNumericTextBox");
                Amount.value(dataItem.Amount);
                Amount.trigger('change');

                llenarsubproduct();
            }

            $('#myModalSolicitudCertificadoDepositoLine').modal('show');
        }
        else {
            var notification = $("#notification").data("kendoNotification");
            notification.show({
                title: "Validacion",
                message: "Debe seleccionar un producto!"
            }, "error");

        }



    }


        function Delete(e) {

        e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "SalesOrderLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    //$("#ControlPalletsLineMant").html('');
                    //$("#ControlPalletsLineMant").html(data);
                    //var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validacion",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            var grid = $("#gridSolicitudCertificadoDepositoDetail").data("kendoGrid");
            grid.dataSource.remove(dataItem);
            //Sync it with the grid
            //grid.dataSource.sync();
        }
    }

</script>



<div class="box">
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.SolicitudCertificadoLine>()
                                                  .Name("gridSolicitudCertificadoDepositoDetail")
                                                  .Columns(columns =>
                                                  {
                                                      columns.Command(command =>
                                                      {
                                                          if (Model.editar == 1)
                                                          {
                                                              command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                                          }
                                                          command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditCotizacionDetalle");
                                                          // command.Custom("Imprimir").Click("ImprimirCotizacion");
                                                          //  command.Edit(); command.Destroy();
                                                      }).Width(100);

                                                      columns.Bound(p => p.CertificadoLineId).Title("Id Line").Width(150);
                                                      columns.Bound(p => p.IdSCD).Title("Certificado Id").Width(150);
                                                      columns.Bound(p => p.SubProductId).Title("Producto").Visible(false);
                                                      columns.Bound(p => p.SubProductName).Title("Producto").Width(150);
                                                      columns.Bound(p => p.UnitMeasureId).Title("Unidad de medida").Visible(false);
                                                      columns.Bound(p => p.UnitMeasurName).Title("Unidad de medida").Width(150);
                                                      columns.Bound(p => p.Description).Title("Descripcion").Width(150);
                                                      columns.Bound(p => p.Quantity).Title("Cantidad").Width(150);
                                                      columns.Bound(p => p.Price).Title("Precio").Width(150);
                                                      //  columns.Bound(p => p.TotalCantidad).Title("Total Cantidad");
                                                      columns.Bound(p => p.Amount).Title("Total").Width(125);

                                                      //columns.Bound(p => p.TaxPercentage).Title("Porcentaje impuestos").Width(150);
                                                      //columns.Bound(p => p.SubTotal).Title("Sub Total").Width(150);
                                                      //columns.Bound(p => p.DiscountAmount).Title("Descuentos").Width(150);
                                                      //columns.Bound(p => p.TaxCode).Title("Tipo Impuesto").Width(150);
                                                      //columns.Bound(p => p.tax).Title("Tipo Impuesto").Width(150);
                                                      // columns.Bound(p => p.TaxAmount).Title("Impuestos").Width(150);
                                                      //columns.Bound(p => p.Total).Title("Total").Width(150);

                                                  })
                                                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))
                                                  .ToolBar(tools =>
                                                  {
                                                      if (Model.editar == 1)
                                                      {
                                                          tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                          .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddCotizacionDetalle();" });
                                                      }

                                                      tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                                                      tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });


                                                  })
                                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                                    .Sortable()
                                                    .AutoBind(true)
                                                    .Pageable()
                                                    .Filterable()
                                                    .Scrollable()
                                                    // .ClientDetailTemplateId("template")
                                                    .Pdf(pdf => pdf.FileName("CertificadoDepositoDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                      .Excel(excel => excel.FileName("CertificadoDepositoDetalleReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                    //.Events(e=>e.Save("onsave"))
                                                    .DataSource(dataSource =>

                                                   dataSource
                                                   //.Ajax()
                                                   .WebApi()

                                                    .ServerOperation(true)
                                                    .Model(model =>
                                                    {
                                                        model.Id(p => p.CertificadoLineId);
                                                        model.Field(p => p.CertificadoLineId).Editable(false);
                                                        model.Field(p => p.IdSCD).Editable(false);

                                                    })
                                                    .Events(events =>
                                                    {
                                                        events.Error("error_handler");
                                                        //events.upda("EditHandler");

                                                    })
                                                    .Read(read => read.Action("GetSalesOrderLine", "CertificadoLine").Data("GetSalesOrderId"))
                                              //.Create(create => create.Action("Insert", "SalesOrderLine"))
                                              //.Update(update => update.Action("Update", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                              //.Destroy(destroy => destroy.Action("Delete", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                              )
        )

    </div>
</div>


<script>

</script>