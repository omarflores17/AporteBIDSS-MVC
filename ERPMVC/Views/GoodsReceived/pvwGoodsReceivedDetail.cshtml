@model ERPMVC.DTO.GoodsReceivedDTO



<script>


    function GetGoodsReceivedLineId() {
        var subproductname = '', unidaddemedida = '', WareHouseId='';
        if ($("#SubProductIddetail") != null) {
            if ($("#SubProductIddetail").data("kendoDropDownList") != null) {
                subproductname = $("#SubProductIddetail").data("kendoDropDownList").text();
            }
        }

        if ($("#UnitOfMeasureId") != null) {
            if ($("#UnitOfMeasureId").data("kendoDropDownList") != null) {
                unidaddemedida = $("#UnitOfMeasureId").data("kendoDropDownList").text();
            }
        }

        if ($("#WareHouseId") != null) {
            if ($("#WareHouseId").data("kendoDropDownList") != null) {
                WareHouseId = $("#WareHouseId").data("kendoDropDownList").text();
            }
        }

        var displayedData = $("#gridGoodsReceivedDetail").data().kendoGrid.dataSource.view();
        var id = -999999;
        debugger;
        if (Number($("#GoodsReceiveLinedId").val()) === 0) {
            if (displayedData.length > 0) {
                for (var i = 0; i < displayedData.length; i++) {
                    //console.log('Linea:' + displayedData[i].CertificadoLineId);
                    //console.log('Linea:' + id);
                    if (displayedData[i].GoodsReceiveLinedId > id)
                        id = displayedData[i].GoodsReceiveLinedId;

                }

                id = id + 1;
            }
            else {
                id = 1;
            }
        }
        else {
            id = $("#GoodsReceiveLinedId").val();
        }

        return {
            'GoodsReceiveLinedId': id,
            'GoodsReceivedId':@Model.GoodsReceivedId,
            'UnitOfMeasureId': $("#UnitOfMeasureId").val(),
            'UnitOfMeasureName': unidaddemedida ,
            'ProducId': $("#ProducId").val(),
            //'ProductName': $("#ProducId").data("kendoDropDownList").text(),
            'SubProductId': $("#SubProductIddetail").val(),
            'SubProductName': subproductname,
            'Description': $("#Description").val(),
            'ControlPalletsId': $("#ControlPalletsId").val(),
            'Quantity': $("#Quantity").val(),
            'QuantitySacos': $("#QuantitySacos").val(),
            'Price': $("#Price").val(),
            'Total': $("#Total").val(),
            'WareHouseId': $("#WareHouseId").val(),
            'WareHouseName': WareHouseId,
            'CenterCostId': $("#CenterCostId").val(),

        }
    }

    function RefreshGoodsReceivedDetail() {
      //  console.log('Refresca Entrada de mercaderias');
        var grid = $("#gridGoodsReceivedDetail").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();
    }


    function AddGoodsReceivedDetalle() {
        var notification = $("#notification").data("kendoNotification");
      //  console.log($("#ProductId").val());
        $("#GoodsReceiveLinedId").val(0);
        if ($("#ProductId").val() !== '' && $("#ProductId").val() !== '0'
            && $("#CustomerId").val() !== '0' && $("#CustomerId").val() !== ''  ) {
            $("#UnitOfMeasureId").data("kendoDropDownList").value(0);
            $("#SubProductIddetail").data("kendoDropDownList").value(0);
            $("#WareHouseId").data("kendoDropDownList").value(0);
            var ControlPalletsId = $("#ControlPalletsId").data("kendoNumericTextBox");
            ControlPalletsId.value(0);
            ControlPalletsId.trigger('change');

            var quantity = $("#Quantity").data("kendoNumericTextBox");
            quantity.value(0);
            quantity.trigger('change');

            var quantitysacos = $("#QuantitySacos").data("kendoNumericTextBox");
            if (quantitysacos !== null)
                quantitysacos.value(0);
            quantitysacos.trigger('change');


           // llenarsubproduct();
            $("#frmGoodsReceivedLine :input").not('#GoodsReceiveLinedId').prop("disabled", false);
            //$("#frmGoodsReceivedLine :input").val('');
            $('#myModalGoodsReceivedLine').modal('show');
        } else {
            var notification = $("#notification").data("kendoNotification");
            notification.show({
                title: "Validación",
                message: "Debe seleccionar un producto y un cliente!"
            }, "error");

        }

    }
     function BusquedaProduct() {

         var dataObject = {
             GoodsReceivedId: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwModalProducto", "GoodsReceived")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (modal) {
                //$("#goodsReceived").html('');
                //$("#goodsReceived").html(result);
                @*window.location.href = "@Url.Action("pvwModalProducto", "GoodsReceived")";*@
                //RefreshCotizacionesDetail();
                 //$("#btnSaveCotizacion").show();
                $('#ModalProduct').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }
    @*function llenarsubproduct() {
           var combobox = $('#SubProductId').getKendoDropDownList();

            var dataObject = { 'ProductId': $("#ProductId").val() };
              $.ajax({
                    url: '@Url.Action("GetSubProductByProductId", "ProductRelation")',
                    method: 'GET',
                    datatype: "json",
                    contentType: 'application/json',
                    async: false,
                    data: dataObject,
                    success: function (data) {
                        combobox.setDataSource(data);
                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {

                      //  $("#btngenerarfactura").show();
                        notification.show({
                            title: "Validacion",
                            message: textStatus + ": " + XMLHttpRequest.responseText
                        }, "error");

                    }
                });
    }*@

    function EditGoodsReceivedDetalle(e) {

        e.preventDefault();
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
       // hcustom = $("#CustomerId").val();
       // $("#SubProductIddetail").data("kendoDropDownList").dataSource.read();
        if (dataItem.GoodsReceivedId > 0) {
            var subproducto = 0;
            var dataObject = { 'GoodsReceiveLinedId': dataItem.GoodsReceiveLinedId };
            $.ajax({
                url: '@Url.Action("pvwGoodsReceivedMant", "GoodsReceivedLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (data) {
                    $("#GoodsReceivedLineMant").html('');
                    $("#GoodsReceivedLineMant").html(data);

                    var txt = $(data);
                    var found = $("#SubProductIddetail", txt);
                    subproducto = $(found).val();
                    console.log(subproducto);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            $("#frmGoodsReceivedLine :input").prop("disabled", true);
            //llenarsubproduct();
            var combobox = $('#SubProductIddetail').getKendoDropDownList();
            combobox.value(subproducto);
            combobox.trigger('change');
        }
        else {

            console.log(dataItem);

            $("#GoodsReceiveLinedId").val(dataItem.GoodsReceiveLinedId);
            $("#GoodsReceivedId").val(dataItem.GoodsReceivedId);

           // $("#UnitOfMeasureName").val(dataItem.UnitOfMeasureName);

            $("#SubProductIddetail").data("kendoDropDownList").dataSource.read();



            var UnitOfMeasureId = $("#UnitOfMeasureId").data("kendoDropDownList");
            UnitOfMeasureId.value(dataItem.UnitOfMeasureId);
            UnitOfMeasureId.trigger('change');

            var WareHouseId = $("#WareHouseId").data("kendoDropDownList");
            WareHouseId.value(dataItem.WareHouseId);
            WareHouseId.trigger('change');

            var SubProductIddetail = $("#SubProductIddetail").data("kendoDropDownList");
            SubProductIddetail.value(dataItem.SubProductId);
            SubProductIddetail.trigger('change');

            var ControlPalletsId = $("#ControlPalletsId").data("kendoNumericTextBox");
            ControlPalletsId.value(dataItem.ControlPalletsId);
            ControlPalletsId.trigger('change');

         //   console.log(dataItem.SubProductId);

            var quantity = $("#Quantity").data("kendoNumericTextBox");
            quantity.value(dataItem.Quantity);
            quantity.trigger('change');

            var quantitysacos= $("#QuantitySacos").data("kendoNumericTextBox");
            if (quantitysacos !== null && dataItem.QuantitySacos != null)
                quantitysacos.value(dataItem.QuantitySacos);
                quantitysacos.trigger('change');

            //var Price = $("#Price").data("kendoNumericTextBox");
            //Price.value(dataItem.Price);
            //Price.trigger('change');
            //var Total = $("#Total").data("kendoNumericTextBox");
            //Total.value(dataItem.Total);
            //Total.trigger('change');
            //var total = $("#Total").data("kendoNumericTextBox");
            //if (total !== null)
            //    total.value(dataItem.TotalSacos);
            //      total.trigger('change');


        }


        $('#myModalGoodsReceivedLine').modal('show');

    }

    function Delete(e) {

        e.preventDefault();
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            var notification = $("#notification").data("kendoNotification");
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

            $.ajax({
                url: '@Url.Action("Delete", "GoodsReceivedLine")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    //$("#ControlPalletsLineMant").html('');
                    //$("#ControlPalletsLineMant").html(data);
                    //var txt = $(data);
                    //var found = $("#SubProductId", txt);
                    //subproducto = $(found).val();
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {

                    //  $("#btngenerarfactura").show();
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");

                }
            });

            var grid = $("#gridGoodsReceivedDetail").data("kendoGrid");
            grid.dataSource.remove(dataItem);
            //Sync it with the grid
            //grid.dataSource.sync();
        }
    }
    
</script>
<style>
    #gridGoodsReceivedDetail .k-grid-content {
        min-height: 100px;
        max-height: 200px;
    }
</style>


<div class="box">
    <div class="box-body">

        @(Html.Kendo().Grid<ERPMVC.Models.Product>()
                                                          .Name("gridGoodsReceivedDetail")
                                                          .Columns(columns =>
                                                          {
                                                              columns.Command(command =>
                                                              {
                                                                  if (Model.editar == 1)
                                                                  {
                                                                      //command.Custom("Eliminar").Text(" ").IconClass("fa fa-trash-alt").Click("Delete");
                                                                  }

                                                                  //command.Edit().Text("Editar").UpdateText("Actualizar").CancelText("Cancelar");
                                                                  // command.Custom("Imprimir").Click("ImprimirCotizacion");
                                                                  //command.Edit(); command.Destroy();
                                                              }).Width(150);
                                                              
                                                            
                                                              columns.Bound(p => p.ProductId).Width(150);
                                                              columns.Bound(p => p.Description).Width(150).Title("Descripción");
                                                              columns.Bound(p => p.DefaultSellingPrice).Title("Costo").Width(150);
                                                              columns.Bound(p => p.DefaultBuyingPrice).Title("Precio").Width(150);
                                                              columns.Bound(p => p.Description).Title("Observaciones").Width(150).Visible(false);
                                                              // columns.Bound(p => p.Total).Title("Total").Width(100);
                                                          })
                                                              .Filterable(f => f.Operators(o => o.ForString(s => s
                                                       .Clear()
                                                       .Contains("Contiene")
                                                               .DoesNotContain("No contiene")
                                                               .EndsWith("Termina con")
                                                               .IsEqualTo("Es igual a")
                                                               .IsNotEqualTo("No es igual a")
                                                               .IsNull("Es nulo")
                                                               .StartsWith("Inicia con")


                                                         )
                                                         .ForNumber(n => n
                                                           .Clear()
                                                           .IsEqualTo("Es igual a")
                                                           .IsGreaterThan("Es mayor que")
                                                           .IsLessThan("Es menor que")
                                                           .IsNull("Es nulo")
                                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                         )
                                                         .ForDate(d => d
                                                         .Clear()
                                                         .IsEqualTo("Es igual que")
                                                         .IsGreaterThan("Es mayor que")
                                                         .IsLessThan("Es menor que")
                                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                         .IsNotEqualTo("No es igual que")
                                                          )
                                                       ))
                                                          .ToolBar(tools =>
                                                          {
                                                              if (Model.editar == 1)
                                                              {
                                                                  tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                  .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "BusquedaProduct();" });
                                                              }



                                                          })
                                                           .Editable(e => e.Mode(GridEditMode.PopUp))
                                                            .Sortable()
                                                            .AutoBind(true)
                                                            .Pageable()
                                                            .Filterable()
                                                            .Scrollable()
                                                            // .ClientDetailTemplateId("template")
                                                            .Pdf(pdf => pdf.FileName("ReciboMercaderiaDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                            .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                              .Excel(excel => excel.FileName("ReciboMercaderiaDetalleReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                            //.Events(e=>e.Save("onsave"))
                                                            .DataSource(dataSource =>

                                                           dataSource
                                                           //.Ajax()
                                                           .WebApi()

                                                            .ServerOperation(true)
                                                            .Model(model =>
                                                            {
                                                                model.Id(p => p.ProductId);
                                                                model.Field(p => p.ProductId).Editable(false);
                                                                //model.Field(p => p.GoodsReceivedId).Editable(false);
                                                                //model.Field(p => p.ControlPalletsId).Editable(true);

                                                            })
                                                            .Events(events =>
                                                            {
                                                                events.Error("error_handler");
                                                                //events.upda("EditHandler");

                                                            })
                                                            .Read(read => read.Action("GetGoodsReceivedLineByGoodsReceivedId", "GoodsReceivedLine").Data("GetGoodsReceivedLineId"))
                                                            //.Create(create => create.Action("Insert", "SalesOrderLine"))
                                                            //.Update(update => update.Action("Update", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                                            .Destroy(destroy => destroy.Action("Delete", "GoodsReceivedLine").Type(HttpVerbs.Post))
                                                      )
        )

    </div>
</div>



<div id="goodsReceived">
    @await Html.PartialAsync("pvwModalProduct", new ERPMVC.Models.Product())
</div>