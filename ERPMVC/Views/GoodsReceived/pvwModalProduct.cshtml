@*@model ERPMVC.Models.Product

@{Layout = null;
    var messages = new Dictionary<string, string>() { 
                                        {"required","Valor requerido" }
                                    };
 
}*@
<script>
       //-- Seleccionar Producto --
    function SelectProduct(e) {
        $('#ModalProduct').modal('hide');
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var products = [{
            Campo: " ",
            ProductId: dataItem.ProductId,
            Description: dataItem.Description,
            DefaultSellingPrice: dataItem.DefaultSellingPrice,
            DefaultBuyingPrice: dataItem.DefaultBuyingPrice,
            Description: dataItem.Description,
        }];
        $("#gridGoodsReceivedDetail").kendoGrid({
            dataSource: {
                data: products,
                pageSize: 10
            },



            pageable: true,
            editable: true
        });
        
    }

</script>
<style>
    #gridProduct .k-grid-content {
        min-height: 100px;
        max-height: 200px;
    }
</style>
<div id="ModalProduct" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h4 class="modal-title" id="titulo">Productos</h4>
                <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
            </div>

            @(Html.Kendo().Grid<ERPMVC.Models.Product>
                              ()

                                .Name("gridProduct")

                                .Columns(columns =>
                                {
                                    columns.Command(command =>
                                    {
                                        //command.Custom("Ver detalles").Click("Detalles");
                                        command.Custom("Seleccionar").Click("SelectProduct");
                                        //command.Custom("Agregar").HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "Agregar()" });
                                        //command.Destroy();
                                    }).Width(150);

                                    columns.Bound(p => p.ProductId).Width(150).Visible(false);
                                    columns.Bound(p => p.Description).Width(150).Title("Descripción");
                                    columns.Bound(p => p.DefaultSellingPrice).Title("Costo").Width(150);
                                    columns.Bound(p => p.DefaultBuyingPrice).Title("Precio").Width(150);
                                    columns.Bound(p => p.Description).Title("Observaciones").Width(150).Visible(false);
                                    //columns.Bound(p => p.Currency.Description).Title("Moneda").Width(190);
                                    //columns.Bound(p => p.Estado).Width(190);


                                })


                                .ToolBar(tools =>
                                {

                                    //tools.Create();
                                    //tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                    //                                      .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "Agregar()" });
                                    //tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                    //tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                                })
                                .Editable(e => e.Mode(GridEditMode.PopUp))
                                .Sortable()
                                .Pageable()
                                .Filterable()
                                .Scrollable()
                                .Pdf(pdf => pdf.FileName("ProductReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                .Excel(excel => excel.FileName("ProductReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                .DataSource(dataSource =>
                                dataSource
                                .WebApi()

                                .ServerOperation(true)
                                .Model(model =>
                                {
                                    model.Id(p => p.ProductId);
                                    model.Field(p => p.ProductId).Editable(false);

                                })
                                .Events(events => events.Error("error_handler"))
                                .Read(read => read.Action("Get", "Product"))
                               //.Create(create => create.Action("Insert", "Product").Type(HttpVerbs.Post))
                               //.Update(update => update.Action("Update", "Product").Type(HttpVerbs.Post))
                               .Destroy(destroy => destroy.Action("Delete", "Product").Type(HttpVerbs.Post))
                                )

            )
        </div>
    </div>
</div>

