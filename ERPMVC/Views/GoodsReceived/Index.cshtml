@using Microsoft.AspNetCore.Http;
<script>


    function clearsession() {
        var dataObject = ["listadoproductosgoodsreceived"];
        $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                //  $('#myModalSalesOrder').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }

      $(document).ready(function () {
        clearsession();
    });


    function AddGoodsReceived() {
     clearsession();

         var dataObject = {
             GoodsReceivedId: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("Details", "GoodsReceived")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#goodsReceived").html('');
                $("#goodsReceived").html(result);
                window.location.href = "@Url.Action("Details", "GoodsReceived")";
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }

    function EditGoodsReceived(e) {
        e.preventDefault();

        clearsession();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            GoodsReceivedId: dataItem.GoodsReceivedId,
            editar: 0
        };

        $.ajax({
            url: '@Url.Action("pvwGoodsReceived", "GoodsReceived")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#goodsReceived").html('');
                $("#goodsReceived").html(result);
                var customer = $("#CustomerId").val();
                $("#CustomerId").val(0);
                //$("#CustomerId").data("kendoDropDownList").value(customer);
                //$("#CustomerId").data("kendoDropDownList").value(customer);

                hcustom = customer;
             //   $("#SubProductId").data("kendoDropDownList").dataSource.read();
                // var sapProject = $("#CustomerId").data("kendoDropDownList").bind("select", onChange(customer));

                $('#myModalGoodsReceived').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }

    function onChange(CustomerId) {
        $("#CustomerId").val(CustomerId);
    }

    function ImprimirGoodsReceived(e, id) {
       // debugger;
        var dataItem;
        if (e != null) {
            e.preventDefault();
            dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        }
        else {
            dataItem = { GoodsReceivedId: $("#GoodsReceivedId").val() };
        }
        @*window.location.href = '@Url.Action("SFGoodsReceived", "GoodsReceived")/' + dataItem.GoodsReceivedId;*@

        var url = '@Url.Action("SFGoodsReceived", "GoodsReceived")/' + dataItem.GoodsReceivedId;
           var win = window.open(url, '_blank');
           win.focus();
    }

    function ImprimirBoletaDeSalida(e, id) {
        var dataItem;
        if (e != null) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr")); 
        }
        else {
            dataItem = { ExitTicket: $("#ExitTicket").val() };
        }
          
         
              //window.location.href = '@Url.Action("SFBoletaDeSalida", "BoletaDeSalida")/' + dataItem.KardexId;     
           var url = '@Url.Action("SFBoletaDeSalida", "BoletaDeSalida")/' + dataItem.ExitTicket;
           var win = window.open(url, '_blank');
           win.focus();
    }


    function closecondition() {
        $('#myModalConditions').modal('hide');
    }


</script>

<h3 class="text-themecolor">Transferencia de Inventario</h3>

@(Html.Kendo().Grid<ERPMVC.Models.GoodsReceived>()
                                  .Name("gridGoodsReceived")
                                  .Columns(columns =>
                                  {
                                      columns.Command(command =>
                                      {
                                          command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditGoodsReceived");
                                          command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirGoodsReceived");

                                          command.Custom("ImprimirBoletaDeSalida").Text(" ").IconClass("mdi mdi-printer").Click("ImprimirBoletaDeSalida");
                                          //  command.Edit(); command.Destroy();
                                      }).Width(250);

                                      columns.Bound(p => p.GoodsReceivedId).Title("Id").Width(150);
                                      columns.Bound(p => p.DocumentDate).Format("{0:dd/MM/yyyy}").ClientTemplate("#=kendo.toString(DocumentDate,'dd/MM/yyyy')#").Title("Fecha Documento").Width(150);

                                      columns.Bound(p => p.Name).Width(150);
                                      columns.Bound(p => p.BranchName).Title("Sucursal").Width(150);
                                      columns.Bound(p => p.ProductName).Title("Servicio").Width(150);
                                  //    columns.Bound(p => p.SubProductName).Title("Sucursal").Width(150);
                                      columns.Bound(p => p.ExitTicket).Title("Ticket de salida").Width(150);
                                      columns.Bound(p => p.CountryName).Width(150);
                                      //columns.Bound(p => p.Reference).Title("Referencia").Width(150);
                                      //columns.Bound(p => p.WarehouseName).Title("Bodega").Width(150);
                                      //columns.Bound(p => p.OrderDate).Format("{0:dd/MM/yyyy}").Width(150);
                                      //columns.Bound(p => p.ProductId).Title("Producto").Width(150);
                                      //columns.Bound(p => p.ProductName).Title("Descripcion").Width(150);
                                      //columns.Bound(p => p.BranchId).Title("Branch Id").Width(150);


                                  })
                                  .Filterable(f => f.Operators(o => o.ForString(s => s
                                           .Clear()
                                           .Contains("Contiene")
                                           .DoesNotContain("No contiene")
                                           .EndsWith("Termina con")
                                           .IsEqualTo("Es igual a")
                                           .IsNotEqualTo("No es igual a")
                                           .IsNull("Es nulo")
                                           .StartsWith("Inicia con")


                                     )
                                     .ForNumber(n => n
                                       .Clear()
                                       .IsEqualTo("Es igual a")
                                       .IsGreaterThan("Es mayor que")
                                       .IsLessThan("Es menor que")
                                       .IsNull("Es nulo")
                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     )
                                     .ForDate(d => d
                                     .Clear()
                                     .IsEqualTo("Es igual que")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     .IsNotEqualTo("No es igual que")
                                      )
                                   ))

                                  .ToolBar(tools =>
                                  {
                                      //tools.Create();
                                      tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                       .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddGoodsReceived();" });

                                      tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                      tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                                  })
                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                    .Sortable()
                                    .AutoBind(true)
                                    .Pageable()
                                    .Filterable()
                                    .Scrollable()
                                    // .ClientDetailTemplateId("template")
                                    .Pdf(pdf => pdf.FileName("GoodsReceivedReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                      .Excel(excel => excel.FileName("GoodsReceivedReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                    //.Events(e=>e.Save("onsave"))
                                    .DataSource(dataSource =>

                                   dataSource
                                   //.Ajax()
                                   .WebApi()
                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.GoodsReceivedId);
                                        model.Field(p => p.GoodsReceivedId).Editable(true);
                                        model.Field(p => p.CustomerId).Editable(true);


                                    })
                                    .Events(events =>
                                    {
                                        events.Error("error_handler");
                                        //events.upda("EditHandler");

                                    })
                                    .Read(read => read.Action("Get", "GoodsReceived"))
                                    .Create(create => create.Action("Insert", "GoodsReceived"))
                                    .Update(update => update.Action("Update", "GoodsReceived", new { id = "{0}" }))
                                    .Destroy(destroy => destroy.Action("Delete", "GoodsReceived", new { id = "{0}" }))
                              )
)




<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridGoodsReceived").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridGoodsReceived").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-button k-button-icontext k-grid-Agregar k-i-plus-sm", "Agregar un nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-Anular", "Anular !");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir");
    setRowButtonTooltip(".k-grid-ImprimirBoletaDeSalida", "Imprimir Boleta de salida");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");

</script>


<div id="ConditionView">
</div>

<div id="CustomerConditionView">
</div>
