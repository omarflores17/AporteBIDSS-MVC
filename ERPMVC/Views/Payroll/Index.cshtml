
@{
    ViewData["Title"] = "Planillas";
}

<script>

    function Detalles(e) {          
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("Detalles", "Payroll")?Id=" + dataItem.IdPlanilla;    
    }

</script>


<h3 class="text-themecolor">Planillas</h3>


@(Html.Kendo().Grid<ERPMVC.Models.Payroll>()
                               .Name("gridPlanillas")
                              .Columns(columns =>
                              {
                                  columns.Command(command =>
                                  {
                                      command.Custom("Ver detalles").Click("Detalles");
                                      //command.Custom("Editar").Click("EditEmp");
                                      command.Edit().UpdateText("Actualizar").CancelText("Cancelar"); ;
                                  }).Width(300).Title("Acciones");

                                  columns.Bound(p => p.IdPlanilla).Width(80).Title("Id");
                                  columns.Bound(p => p.NombrePlanilla).Width(300).Title("Nombre Planilla");
                                  columns.Bound(p => p.DescripcionPlanilla).Width(400);
                                  columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy}").Title("Creación").Width(150);
                                  columns.Bound(p => p.Estado).Width(150);
                              })
                                  .Filterable(f => f.Operators(o => o.ForString(s => s
                                                   .Clear()
                                                   .Contains("Contiene")
                                                   .DoesNotContain("No contiene")
                                                   .EndsWith("Termina con")
                                                   .IsEqualTo("Es igual a")
                                                   .IsNotEqualTo("No es igual a")
                                                   .IsNull("Es nulo")
                                                   .StartsWith("Inicia con")


                                             )
                                             .ForNumber(n => n
                                               .Clear()
                                               .IsEqualTo("Es igual a")
                                               .IsGreaterThan("Es mayor que")
                                               .IsLessThan("Es menor que")
                                               .IsNull("Es nulo")
                                               .IsLessThanOrEqualTo("Es menor o igual que")
                                               .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                             )
                                             .ForDate(d => d
                                             .Clear()
                                             .IsEqualTo("Es igual que")
                                             .IsGreaterThan("Es mayor que")
                                             .IsLessThan("Es menor que")
                                             .IsLessThanOrEqualTo("Es menor o igual que")
                                             .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                             .IsNotEqualTo("No es igual que")
                                              )
                                           ))
                              .ToolBar(tools =>
                              {
                                  //tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus").HtmlAttributes(new { @onclick = "AgregarEmp();" });
                                  tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                  tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                              })
                               .Editable(e => e.Mode(GridEditMode.PopUp))
                               .Sortable()
                               .Pageable()
                               .Filterable()
                               .Scrollable()
                               .Pdf(pdf => pdf.FileName("PayrollReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                               + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                               .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                 .Excel(excel => excel.FileName("PayrollReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                               + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                               .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                               .DataSource(dataSource =>
                                  dataSource
                                    .WebApi()
                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.IdPlanilla);
                                        model.Field(p => p.IdPlanilla).Editable(false);
                                    })
                                    .Events(events => events.Error("error_handler"))
                                    .Read(read => read.Action("Get", "Payroll"))
                                    .Create(create => create.Action("Insert", "Payroll"))
                                    .Update(update => update.Action("Update", "Payroll", new { id = "{0}" }))
                                    .Destroy(destroy => destroy.Action("Delete", "Payroll", new { id = "{0}" }))
                              )
)

@*<div id="employee">
    @await Html.PartialAsync("Empleado", new ERPMVC.Models.Employees())
</div>*@
