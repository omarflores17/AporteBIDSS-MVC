
<h3 class="text-themecolor">Boleta de Salida</h3>
<script>

      function clearsession() {
            var dataObject = ["listadoproductos"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
          });
      }

        function AddBoletaDeSalida() {
  
       //  clearsession();
         var dataObject = {
             BoletaDeSalidaId: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("pvwBoletaDeSalida", "BoletaDeSalida")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                //$("#salesorder").html('');
                //$("#salesorder").html(result);
                //RefreshCotizacionesDetail();
                // $("#btnSaveCotizacion").show();
                $('#myModalBoletaDeSalida').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }

    function RefreshGridBoletaSalida() {
        var grid = $("#gridBoletaDeSalida").getKendoGrid();
        grid.dataSource.read();
    }


    function EditBoletaDeSalida(e) {
        e.preventDefault();

       // clearsession();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            BoletaDeSalidaId: dataItem.BoletaDeSalidaId,
            editar : 0
        };

        $.ajax({
            url: '@Url.Action("pvwBoletaDeSalida", "BoletaDeSalida")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#salesorder").html('');
                $("#salesorder").html(result);

              //  RefreshCotizacionesDetail();
                // $("#btnSaveCotizacion").hide();
                $('#myModalBoletaDeSalida').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }


       function ImprimirBoletaDeSalida(e) {
           e.preventDefault();
           debugger;
           var dataItem = this.dataItem($(e.currentTarget).closest("tr")); 
              //window.location.href = '@Url.Action("SFBoletaDeSalida", "BoletaDeSalida")/' + dataItem.KardexId;     
           var url = '@Url.Action("SFBoletaDeSalida", "BoletaDeSalida")/' + dataItem.BoletaDeSalidaId;
           var win = window.open(url, '_blank');
           win.focus();
    }

</script>

@(Html.Kendo().Grid<ERPMVC.Models.BoletaDeSalida>()
                  .Name("gridBoletaDeSalida")
                  .Columns(columns =>
                  {
                      columns.Command(command =>
                      {
                          command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditBoletaDeSalida");
                          command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirBoletaDeSalida");
                          // command.Custom("Ver detalles").Click("Detalles");
                          // command.Edit(); command.Destroy();
                      }).Width(170);
                      columns.Bound(p => p.BoletaDeSalidaId).Width(100);
                      columns.Bound(p => p.CustomerId).Visible(false).Width(100);
                      columns.Bound(p => p.CustomerName).Width(150);
                      columns.Bound(p => p.GoodsDeliveredId).Width(100);
                      columns.Bound(p => p.BranchName).Width(100);
                      columns.Bound(p => p.DocumentDate).Format("{0:dd/MM/yyyy}").Width(100);
                      columns.Bound(p => p.Cargadoname).Width(100);
                      columns.Bound(p => p.Quantity).Width(100);
                      columns.Bound(p => p.UnitOfMeasureName).Width(100);


                  })
                      .Filterable(f => f.Operators(o => o.ForString(s => s
                                           .Clear()
                                           .Contains("Contiene")
                                           .DoesNotContain("No contiene")
                                           .EndsWith("Termina con")
                                           .IsEqualTo("Es igual a")
                                           .IsNotEqualTo("No es igual a")
                                           .IsNull("Es nulo")
                                           .StartsWith("Inicia con")


                                     )
                                     .ForNumber(n => n
                                       .Clear()
                                       .IsEqualTo("Es igual a")
                                       .IsGreaterThan("Es mayor que")
                                       .IsLessThan("Es menor que")
                                       .IsNull("Es nulo")
                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     )
                                     .ForDate(d => d
                                     .Clear()
                                     .IsEqualTo("Es igual que")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     .IsNotEqualTo("No es igual que")
                                      )
                                   ))
                  .ToolBar(tools =>
                  {
                      //tools.Create();
                      tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                        .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddBoletaDeSalida();" });

                      tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                      tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                  })
                  .Editable(e => e.Mode(GridEditMode.PopUp))
                  .Sortable()
                  .Pageable()
                  .Filterable()
                  .Scrollable()
                  .Pdf(pdf => pdf.FileName("BoletaDeSalidaReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                   + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                   .ProxyURL(Url.Action("Export", "Home")).AllPages())
                     .Excel(excel => excel.FileName("BoletaDeSalidaReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                   + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                   .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                  .DataSource(dataSource =>
                      dataSource
                        .WebApi()
                        .ServerOperation(true)
                        .Model(model =>
                        {
                            model.Id(p => p.CustomerId);
                            model.Field(p => p.CustomerId).Editable(false);
                        })
                        .Events(events => events.Error("error_handler"))
                        .Read(read => read.Action("Get", "BoletaDeSalida"))
                        .Create(create => create.Action("Post", "BoletaDeSalida"))
                        .Update(update => update.Action("Put", "BoletaDeSalida", new { id = "{0}" }))
                        .Destroy(destroy => destroy.Action("Delete", "BoletaDeSalida", new { id = "{0}" }))
                  )
                    .Events(e =>
                    {
                        //e.Save("onsave");
                    })
)

<div id="salesorder">
    @await Html.PartialAsync("pvwBoletaDeSalida", new ERPMVC.Models.BoletaDeSalida { BoletaDeSalidaId = 0, DocumentDate = DateTime.Now, })
</div>