@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "CENTROS DE COSTO";
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    //function caidata(data) {
      //  data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        //data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    //}

      function AddDimensions() {



          $('#ModalDimensions').find(':input').not(':submit').val('');

          $('#ModalDimensions').modal('show');
          $("#Num").val("");
          
          



      }


         function EditDimensions(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
             var dataObject = {
                 Num: dataItem.Num,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddDimensions", "Dimensions")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumDimensions").html('');
                    $("#NumDimensions").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalDimensions').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }



</script>

<h3 class="text-themecolor">Centros de Costo</h3>
@(Html.Kendo().Grid<ERPMVC.Models.Dimensions>
                    ()
                    .Name("gridNumeracionDimensions")
                    .Columns(columns =>
                    {
                        columns.Command(command =>
                        {
                            //command.Custom("Ver detalles").Click("Detalles");
                            command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditDimensions");

                            //command.Custom("Editar").Click("EditDimensions");
                            //  command.Destroy();
                        }).Width(100);
                        columns.Bound(p => p.Num).Title("Codigo").Width(250);
                        columns.Bound(p => p.Description).Title("Nombre de Centro").Width(200);
                        columns.Bound(p => p.Estado).Width(200);
                        //columns.Bound(p => p.DimCode).Width(150);
                        //columns.Bound(p => p.UsuarioCreacion).Width(250);
                        //columns.Bound(p => p.UsuarioModificacion).Width(250);
                        //columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy}").Width(450);
                        //columns.Bound(p => p.FechaModificacion).Format("{0:dd/MM/yyyy}").Width(450);


                    })
                        .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))
                    .ToolBar(tools =>
                    {
                        // tools.Create();
                        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                               .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddDimensions()" });
                        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                    })
                    .Editable(e => e.Mode(GridEditMode.PopUp))
                    .Sortable()
                    .Pageable()
                    .Filterable()
                    .Scrollable()
                    .Pdf(pdf => pdf.FileName("DimensionsReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                        .Excel(excel => excel.FileName("DimensionsReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                    .DataSource(dataSource =>
                        dataSource
                        .WebApi()

                        .ServerOperation(true)
                        .Model(model =>
                        {
                            model.Id(p => p.Num);
                            model.Field(p => p.Num).Editable(false);
                            model.Field(p => p.Description).Editable(true);
                            model.Field(p => p.IdEstado).Editable(true);
                            model.Field(p => p.Estado).Editable(true);
                        })
                        .Events(events => events.Error("error_handler"))
                        .Read(read => read.Action("GetDimensions", "Dimensions"))
                        .Create(create => create.Action("Insert", "Dimensions"))
                        .Update(update => update.Action("Update", "Dimensions", new { Num = "{1}" }).Type(HttpVerbs.Put))
                    //.Destroy(destroy => destroy.Action("Delete", "Dimensions", new { Num = "{1}" }).Type(HttpVerbs.Delete))

                    )
                    .Events(e =>
                    {
                        e.Save("onsave");

                    })
)

<div id="NumDimensions">
        @await Html.PartialAsync("pvwAddDimensions", new ERPMVC.DTO.DimensionsDTO {Num="0" })
    </div>