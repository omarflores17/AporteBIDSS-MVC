@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Movimientos Financieros";
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }


    function AddJournalEntry() {



        $('#ModalJournalEntry').find(':input').not(':submit').val('');

        $('#ModalJournalEntry').modal('show');
        $("#JournalEntryId").val('0');




      }


    function EditJournalEntry(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                JournalEntryId: dataItem.JournalEntryId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddJournalEntry", "JournalEntry")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumJournalEntry").html('');
                    $("#NumJournalEntry").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalJournalEntry').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }

    function DetallesJournalEntry(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        window.location.href = "@Url.Action("Proveedores", "JournalEntry")?JournalEntryId=" + dataItem.JournalEntryId;
        //update => update.Action("Update", "Purch", new { TypeAccountId = "{0}" }).Type(HttpVerbs.Put)
    }

</script>

<h3 class="text-themecolor">Movimiento Financiero</h3>
@(Html.Kendo().Grid<ERPMVC.Models.JournalEntry>
        ()
        .Name("gridNumeracionJournalEntry")
        .Columns(columns =>
        {
            columns.Command(command =>
            {

              
                command.Custom("Ver detalles").Text(" ").IconClass("far fa-list-alt").Click("DetallesJournalEntry");
                command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditJournalEntry");

                //  command.Destroy();
            }).Width(100);

            columns.Bound(p => p.JournalEntryId).Title("Id").Width(1);
            columns.Bound(p => p.IdPaymentCode).Title("Codigo").Width(150);
            columns.Bound(p => p.IdTypeofPayment).Title("Tipo de Pago").Width(200);
            columns.Bound(p => p.CreatedDate).Title("Fecha de Creación").Width(250);
            columns.Bound(p => p.VoucherType).Title("Tipo de Diario").Width(250);
            columns.Bound(p => p.PartyId).Title("Id de Partida").Width(250);
            columns.Bound(p => p.Posted).Title("Posteado").Width(200);
        })
        .Filterable(f => f.Operators(o => o.ForString(s => s
        .Clear()
        .Contains("Contiene")
        .DoesNotContain("No contiene")
        .EndsWith("Termina con")
        .IsEqualTo("Es igual a")
        .IsNotEqualTo("No es igual a")
        .IsNull("Es nulo")
        .StartsWith("Inicia con")


        )
        .ForNumber(n => n
        .Clear()
        .IsEqualTo("Es igual a")
        .IsGreaterThan("Es mayor que")
        .IsLessThan("Es menor que")
        .IsNull("Es nulo")
        .IsLessThanOrEqualTo("Es menor o igual que")
        .IsGreaterThanOrEqualTo("Es mayor o igual que")
        )
        .ForDate(d => d
        .Clear()
        .IsEqualTo("Es igual que")
        .IsGreaterThan("Es mayor que")
        .IsLessThan("Es menor que")
        .IsLessThanOrEqualTo("Es menor o igual que")
        .IsGreaterThanOrEqualTo("Es mayor o igual que")
        .IsNotEqualTo("No es igual que")
        )
        ))
        .ToolBar(tools =>
        {
            // tools.Create();
            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                        .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddJournalEntry()" });
            tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
            tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



        })
        .Editable(e => e.Mode(GridEditMode.PopUp))
        .Sortable()
        .Pageable()
        .Filterable()
        .Scrollable()
        .Pdf(pdf => pdf.FileName("JournalEntryReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
        .ProxyURL(Url.Action("Export", "Home")).AllPages())
        .Excel(excel => excel.FileName("JournalEntryReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
        .DataSource(dataSource =>
        dataSource
        .WebApi()

        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.JournalEntryId);
            model.Field(p => p.IdPaymentCode).Editable(true);
            model.Field(p => p.IdTypeofPayment).Editable(true);
            model.Field(p => p.VoucherType).Editable(true);
            model.Field(p => p.PartyId).Editable(true);
            model.Field(p => p.Posted).Editable(true);

        })
        .Events(events => events.Error("error_handler"))
        .Read(read => read.Action("GetJournalEntry", "JournalEntry"))
        .Create(create => create.Action("Insert", "JournalEntry"))
        .Update(update => update.Action("Update", "JournalEntry", new { JournalEntryId = "{0}" }).Type(HttpVerbs.Put))
        //.Destroy(destroy => destroy.Action("Delete", "TypeAccount", new { Num = "{1}" }).Type(HttpVerbs.Delete))

        )
        .Events(e =>
        {
            e.Save("onsave");

        })
)


<div id="NumJournalEntry">
    @await Html.PartialAsync("pvwAddJournalEntry", new ERPMVC.DTO.JournalEntryDTO { JournalEntryId = 0 })
</div>
