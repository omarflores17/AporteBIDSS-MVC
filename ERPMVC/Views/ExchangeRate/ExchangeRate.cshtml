@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "TASA DE CAMBIO DE DOLAR";
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }


    function AddExchangeRate() {



        $('#ModalExchangeRate').find(':input').not(':submit').val('');

        $('#ModalExchangeRate').modal('show');
        $("#ExchangeRateId").val('0');





      }


    function EditExchangeRate(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            ExchangeRateId: dataItem.ExchangeRateId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddExchangeRate", "ExchangeRate")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumExchangeRate").html('');
                    $("#NumExchangeRate").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalExchangeRate').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }



</script>

<h3 class="text-themecolor">Tasa de Dollar</h3>
@(Html.Kendo().Grid<ERPMVC.Models.ExchangeRate>
                                ()
                                .Name("gridNumeracionExchangeRate")
                                .Columns(columns =>
                                {
                                    columns.Command(command =>
                                    {
                                        //command.Custom("Ver detalles").Click("Detalles");
                                        //command.Custom("Editar").Click("EditTypeAccount");
                                        command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditExchangeRate");

                                        //  command.Destroy();
                                    }).Width(100);
                                    columns.Bound(p => p.ExchangeRateId).Title("Codigo").Width(2);
                                    columns.Bound(p => p.DayofRate).Title("Dia").Format("{0:dd/MM/yyyy}").Width(200);
                                    columns.Bound(p => p.ExchangeRateValue).Title("Valor de cambio")
.Width(100);


                                })
                                    .Filterable(f => f.Operators(o => o.ForString(s => s
                                                           .Clear()
                                                           .Contains("Contiene")
                                                           .DoesNotContain("No contiene")
                                                           .EndsWith("Termina con")
                                                           .IsEqualTo("Es igual a")
                                                           .IsNotEqualTo("No es igual a")
                                                           .IsNull("Es nulo")
                                                           .StartsWith("Inicia con")


                                                     )
                                                     .ForNumber(n => n
                                                       .Clear()
                                                       .IsEqualTo("Es igual a")
                                                       .IsGreaterThan("Es mayor que")
                                                       .IsLessThan("Es menor que")
                                                       .IsNull("Es nulo")
                                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                     )
                                                     .ForDate(d => d
                                                     .Clear()
                                                     .IsEqualTo("Es igual que")
                                                     .IsGreaterThan("Es mayor que")
                                                     .IsLessThan("Es menor que")
                                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                     .IsNotEqualTo("No es igual que")
                                                      )
                                                   ))
                                .ToolBar(tools =>
                                {
                                    // tools.Create();
                                    tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                   .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddExchangeRate()" });
                                    tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                    tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                                })
                                .Editable(e => e.Mode(GridEditMode.PopUp))
                                .Sortable()
                                .Pageable()
                                .Filterable()
                                .Scrollable()
                                .Pdf(pdf => pdf.FileName("ExchangeRateReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                    .Excel(excel => excel.FileName("ExchangeRateReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                .DataSource(dataSource =>
                                    dataSource
                                    .WebApi()

                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.ExchangeRateId);
                                        model.Field(p => p.DayofRate).Editable(true);
                                        model.Field(p => p.ExchangeRateValue).Editable(true);

                                    })
                                    .Events(events => events.Error("error_handler"))
                                    .Read(read => read.Action("GetExchangeRate", "ExchangeRate"))
                                    .Create(create => create.Action("Insert", "ExchangeRate"))
                                    .Update(update => update.Action("Update", "ExchangeRate", new { ExchangeRateId = "{0}" }).Type(HttpVerbs.Put))
                                //.Destroy(destroy => destroy.Action("Delete", "TypeAccount", new { Num = "{1}" }).Type(HttpVerbs.Delete))

                                )
                                .Events(e =>
                                {
                                    e.Save("onsave");

                                })
)

<div id="NumExchangeRate">
    @await Html.PartialAsync("pvwAddExchangeRate", new ERPMVC.DTO.ExchangeRateDTO { ExchangeRateId = 0, DayofRate = DateTime.Now })
</div>