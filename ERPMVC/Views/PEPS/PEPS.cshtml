@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "PEPS";
}

<script>

    function onsave(e) {
     //   console.log(new Date(e.model.FechaRecepcion).toISOString());
       // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddPuntoPEPS() {

        $('#ModalPEPS').find(':input').not(':submit').val('');
        $('#ModalPEPS').modal('show');
        $("#PEPSId").val('0');



    }


         function EditPEPS(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                PEPSId: dataItem.PEPSId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddPEPS", "PEPS")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#numPEPS").html('');
                    $("#numPEPS").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalPEPS').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }

</script>

<h3 class="text-themecolor">PEPS</h3>

@( Html.Kendo().Grid<ERPMVC.Models.PEPS>
                ()
                .Name("gridPEPS")

                .Columns(columns =>
                {
                    columns.Command(command =>
                    {
                        //command.Custom("Ver detalles").Click("Detalles");
                        command.Custom("Editar").Click("EditPEPS");
                        command.Destroy().Text("Eliminar");
                    }).Width(250);
                    columns.Bound(p => p.PEPSId).Width(100);
                    columns.Bound(p => p.DocumentDate).Format("{0:dd/MM/yyyy}").Width(250);
                    columns.Bound(p => p.Funcionario).Width(200);
                    columns.Bound(p => p.Cargo).Width(200);
                    columns.Bound(p => p.StateName).Width(200);
                    columns.Bound(p => p.CityName).Width(200);
                    columns.Bound(p => p.CountryName).Width(200);
                    columns.Bound(p => p.Observacion).Width(200);
                    columns.Bound(p => p.Official).Width(200);
                    columns.Bound(p => p.Estado).Width(200);
                    //columns.Bound(p => p.UsuarioModificacion).Width(200);


                })
                    .Filterable(f => f.Operators(o => o.ForString(s => s
                                           .Clear()
                                           .Contains("Contiene")
                                           .DoesNotContain("No contiene")
                                           .EndsWith("Termina con")
                                           .IsEqualTo("Es igual a")
                                           .IsNotEqualTo("No es igual a")
                                           .IsNull("Es nulo")
                                           .StartsWith("Inicia con")


                                     )
                                     .ForNumber(n => n
                                       .Clear()
                                       .IsEqualTo("Es igual a")
                                       .IsGreaterThan("Es mayor que")
                                       .IsLessThan("Es menor que")
                                       .IsNull("Es nulo")
                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     )
                                     .ForDate(d => d
                                     .Clear()
                                     .IsEqualTo("Es igual que")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     .IsNotEqualTo("No es igual que")
                                      )
                                   ))
                .ToolBar(tools =>
                {
                    //tools.Create();
                    tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                         .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddPuntoPEPS()" });
                    tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                    tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                })
                .Editable(e => e.Mode(GridEditMode.PopUp))
                .Sortable()
                .Pageable()
                .Filterable()
                .Scrollable()
                .Pdf(pdf => pdf.FileName("PEPSReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                    .Excel(excel => excel.FileName("PEPSReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                .DataSource(dataSource =>
                    dataSource
                    .WebApi()

                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.PEPSId);

                        model.Field(p => p.UsuarioCreacion).Editable(false);
                        model.Field(p => p.UsuarioModificacion).Editable(false);

                    })
                    .Events(events => events.Error("error_handler"))
                    .Read(read => read.Action("Get", "PEPS"))
                    .Create(create => create.Action("Insert", "PEPS"))
                    .Update(update => update.Action("Update", "PEPS").Type(HttpVerbs.Post))
                    .Destroy(destroy => destroy.Action("Delete", "PEPS").Type(HttpVerbs.Post))

                )
                .Events(e =>
                {
                    e.Save("onsave");

                })
)

<div id="numPEPS">
    @await Html.PartialAsync("pvwAddPEPS", new ERPMVC.DTO.PESPDTO { PEPSId = 0, DocumentDate = DateTime.Now })
</div>
