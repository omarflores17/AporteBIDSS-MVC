@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Tipo Cliente";

}

<script>
    
    function Agregar() {

         var dataObject = {
             CustomerTypeId: 0
        };

        $.ajax({
            url:  '@Url.Action("pvwCustomerType", "CustomerType")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#NumCustomerType").html('');
                $("#NumCustomerType").html(result);

                //$("#btnCAI").hide();
                $('#ModalCustomerType').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 swal("Error", textStatus, "error");
              }
        });


    }

         function EditCustomerType(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                CustomerTypeId: dataItem.CustomerTypeId,
                editar : 0
            };
            $.ajax({
                url: '@Url.Action("pvwCustomerType", "CustomerType")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumCustomerType").html('');
                    $("#NumCustomerType").html(result);

                    //$("#btnCAI").hide();
                    $('#ModalCustomerType').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
    }

    //funcion para eliminar
    function Delete(e) {
        if (confirm('¿Seguro que quiere eliminar este registro?')) {
            debugger
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            $.ajax({
               url: '@Url.Action("Delete", "CustomerType")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                //data: { Id: dataItem.UnitOfMeasureId },
                success: function (data) {
                    var grid = $("#gridCustomerType").data("kendoGrid");
                    grid.dataSource.remove(dataItem);
                    $("#titulo").text("Eliminar Tipo de Proveedor");
                },
                 error: function (XMLHttpRequest, textStatus, errorThrown) {
                     swal("Error", textStatus, "error");
                  }
            });
        }
    }

</script>

<h3 class="text-themecolor">Tipo Cliente</h3>

@(Html.Kendo().Grid<ERPMVC.Models.CustomerType>
                  ()

                    .Name("gridCustomerType")
                    .Columns(columns =>
                    {

                        columns.Command(command =>
                        {
                            //command.Custom("Ver detalles").Click("Detalles");
                            command.Custom("Editar").IconClass("fa fa-edit").Click("EditCustomerType").Text(" ");
                            command.Custom("Eliminar").Click("Delete").IconClass("fa fa-trash").Text(" ");
                        }).Width(200).Title("Acciones");

                        columns.Bound(p => p.CustomerTypeId).Width(170).Title("No");
                        columns.Bound(p => p.CustomerTypeName).Width(170).Title("Tipo");
                        columns.Bound(p => p.Description).Width(200).Title("Descripción");
                        //columns.Bound(p => p.Estado).Width(200);
                        columns.Bound(p => p.FechaModificacion).Format("{0:dd/MM/yyyy}").Width(150).Title("Fecha Modificacion");


                    })
                        .Filterable(f => f.Operators(o => o.ForString(s => s
                                           .Clear()
                                           .Contains("Contiene")
                                           .DoesNotContain("No contiene")
                                           .EndsWith("Termina con")
                                           .IsEqualTo("Es igual a")
                                           .IsNotEqualTo("No es igual a")
                                           .IsNull("Es nulo")
                                           .StartsWith("Inicia con")


                                     )
                                     .ForNumber(n => n
                                       .Clear()
                                       .IsEqualTo("Es igual a")
                                       .IsGreaterThan("Es mayor que")
                                       .IsLessThan("Es menor que")
                                       .IsNull("Es nulo")
                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     )
                                     .ForDate(d => d
                                     .Clear()
                                     .IsEqualTo("Es igual que")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     .IsNotEqualTo("No es igual que")
                                      )
                                   ))

                    .ToolBar(tools =>
                    {
                        // tools.Create();
                        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                           .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "Agregar()" });
                        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                    })
                    .Editable(e => e.Mode(GridEditMode.PopUp))
                    .Sortable()
                    .Pageable()
                    .Filterable()
                    .Scrollable()
                    .Pdf(pdf => pdf.FileName("TipoClienteReporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                    .Excel(excel => excel.FileName("TipoClienteReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                    .DataSource(dataSource =>
                    dataSource
                    .WebApi()

                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.CustomerTypeId);
                        model.Field(p => p.CustomerTypeId).Editable(false);


                    })
                    .Events(events => events.Error("error_handler"))
                    .Read(read => read.Action("Get", "CustomerType"))
                    .Create(create => create.Action("Insert", "CustomerType").Type(HttpVerbs.Post))
                    .Update(update => update.Action("Update", "CustomerType").Type(HttpVerbs.Put))
                    .Destroy(destroy => destroy.Action("Delete", "CustomerType", new { CustomerTypeId = "{0}" }).Type(HttpVerbs.Delete))

                    )
)

<div id="NumCustomerType">
    @await Html.PartialAsync("pvwCustomerType", new ERPMVC.DTO.CustomerTypeDTO { CustomerTypeId = 0 })
</div>
<script>
    //para los tools tips
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCustomerType").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCustomerType").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir registro");
    setRowButtonTooltip(".k-grid-ImprimirBoletaDeSalida", "Imprimir Boleta de salida");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");

</script>