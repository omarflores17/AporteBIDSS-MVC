@using Kendo.Mvc.UI
@{
    ViewData["Title"] = "Contratos plan de pagos";
}
@{

    var Sucursal = ViewData["Sucursal"] as IEnumerable<ERPMVC.Models.Branch>;
    var Empleado = ViewData["Empleado"] as IEnumerable<ERPMVC.Models.Employees>;
   
}
<script>
    function GetBranchId() {
        return { BranchId: $("#BranchId").val() }
    }
    function GetEmployeesId() {
        return { EmployeesId: $("#EmployeesId").val() }
    }
    //-- Agregar --

    function AgregarUoM() {

         var dataObject = {
             Contrato_movimientoId: 0
        };
        debugger
        $.ajax({
            url: '@Url.Action("Details", "Contrato_movimientos")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                window.location.href = "@Url.Action("Details", "Contrato_movimientos")";
                RefreshCotizacionesDetail();
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 swal("Error", textStatus, "error");
              }
        });


    }

    //-- Editar --
    function EditUoM(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            ContratoId: dataItem.ContratoId
        };
        $.ajax({
            url: '@Url.Action("pvwContrato_movimientosDetail", "Contrato_movimientos")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            //data: { Id: dataItem.UnitOfMeasureId },
            success: function (result) {
                $("#unitofmeasure").html('');
                $("#unitofmeasure").html(result);
                $("#titulo").text("Editar Contrato");
                //Mostrar modal con la información
                $('#UoModal').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 swal("Error", textStatus, "error");
              }
        });
    }




    function RefrescarGrid() {
        var grid = $("#gridpagos").getKendoGrid();
        grid.dataSource.read();

    }

    //funcion para eliminar
    function Delete(e) {
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            debugger
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            $.ajax({
               url: '@Url.Action("Delete", "Contrato_movimientos")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                //data: { Id: dataItem.UnitOfMeasureId },
                success: function (data) {
                    var grid = $("#gridpagos").data("kendoGrid");
                    grid.dataSource.remove(dataItem);
                    $("#titulo").text("Eliminar Contrato");
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    swal("Error", textStatus, "error");
                }
            });
        }
    }

</script>

<h3 class="text-themecolor">Plan de pagos</h3>


@(Html.Kendo().Grid<ERPMVC.Models.Contrato_movimientos>
                    ()
                    .Name("gridpagos")
                    .Columns(columns =>
                    {
                        columns.Command(command =>
                        {
                            //command.Custom("Ver detalles").Click("Detalles");
                            //command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditUoM");
                            //command.Custom("Eliminar").Click("Delete").IconClass("fa fa-trash").Text(" ");
                        }).Width(10);
                        columns.Bound(p => p.Contrato_movimientosId).Width(100).Title("No");
                        columns.Bound(p => p.ContratoId).Width(100).Title("Contrato");
                        columns.ForeignKey(p => p.BranchId, (System.Collections.IEnumerable)ViewData["Sucursal"], "BranchId", "BranchName").Title("Sucursal").Width(150);

                        columns.Bound(p => p.Forma_pago).Title("Forma de pago").Width(150).ClientTemplate("#if(Forma_pago==1) { #Efectivo#}else if(Forma_pago==2) { #Tarjeta#}" +
                               "else if(Forma_pago==3) { #Cheque#}else if(Forma_pago==4) { #Transferencia ACH#}#").Filterable(true);
                        columns.Bound(p => p.Valorcapital).Width(100).Title("Valor Capital");

                    })
                    .Filterable(f => f.Operators(o => o.ForString(s => s
                    .Clear()
                    .Contains("Contiene")
                    .DoesNotContain("No contiene")
                    .EndsWith("Termina con")
                    .IsEqualTo("Es igual a")
                    .IsNotEqualTo("No es igual a")
                    .IsNull("Es nulo")
                    .StartsWith("Inicia con")


                    )
                    .ForNumber(n => n
                    .Clear()
                    .IsEqualTo("Es igual a")
                    .IsGreaterThan("Es mayor que")
                    .IsLessThan("Es menor que")
                    .IsNull("Es nulo")
                    .IsLessThanOrEqualTo("Es menor o igual que")
                    .IsGreaterThanOrEqualTo("Es mayor o igual que")
                    )
                    .ForDate(d => d
                    .Clear()
                    .IsEqualTo("Es igual que")
                    .IsGreaterThan("Es mayor que")
                    .IsLessThan("Es menor que")
                    .IsLessThanOrEqualTo("Es menor o igual que")
                    .IsGreaterThanOrEqualTo("Es mayor o igual que")
                    .IsNotEqualTo("No es igual que")
                    )
                    ))
                    .ToolBar(tools =>
                    {
                        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus").HtmlAttributes(new { @onclick = "AgregarUoM();" });
                        //tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                        //tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });


                    })
                    .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                    .Sortable()
                    .Pageable()
                    .Filterable()
                    .Scrollable()
                    .Pdf(pdf => pdf.FileName("Contrato_plan_pagosReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                    .Excel(excel => excel.FileName("Contrato_plan_pagosReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                    .DataSource(dataSource =>
                    dataSource
                    .WebApi()
                    .ServerOperation(true)
                    .Model(model =>
                    {
                        //model.Id(p => p.ContratoId);
                        //model.Field(p => p.ContratoId).Editable(false);

                    })
                    .Events(events => events.Error("error_handler"))
                    .Read(read => read.Action("GetContrato_movimientos", "Contrato_movimientos"))
                    .Create(create => create.Action("Insert", "Contrato_movimientos"))
                    .Update(update => update.Action("Update", "Contrato_movimientos", new { Contrato_movimientosId = "{0}" }))
                    //.Destroy(destroy => destroy.Action("Delete", "VendorType", new { id = "{0}" }).Type(HttpVerbs.Post))

                    )
)
@*<div id="unitofmeasure">
        @await Html.PartialAsync("pvwContrato", new ERPMVC.Models.Contrato())
    </div>*@
<script>
    //para los tools tips
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridpagos").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridpagos").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir");
    setRowButtonTooltip(".k-grid-ImprimirBoletaDeSalida", "Imprimir Boleta de salida");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>