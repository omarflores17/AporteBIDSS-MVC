@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Tax";

}

<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddTax() {
        var dataObject = {
            TaxId: 0
        };

        $.ajax({
            url: '@Url.Action("pvwAddTax", "Tax")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                //console.log('success', result)

                $("#numTax").html('');
                $("#numTax").html(result);


                //$("#btnCAI").hide();
                $('#ModalTax').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });

    }


    @* function EditTax(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            TaxId: dataItem.TaxId,
            editar: 0
        };

        $.ajax({
            url: '@Url.Action("pvwEditTax", "Tax")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                //console.log('success', result)

                $("#numTax").html('');
                $("#numTax").html(result);


                //$("#btnCAI").hide();
                $('#ModalEditTax').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    } *@
    //Editar
    //-- Editar --
    function EditTax(e) {
        e.preventDefault();
        
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            TaxId: dataItem.TaxId,
            editar: 0
        };
        $.ajax({
            url: '@Url.Action("pvwAddTax", "Tax")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#numTax").html('');
                $("#numTax").html(result);
                $("#titulo").text("Editar Impuesto");
                //Mostrar modal con la información
                $('#ModalTax').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 swal("Error", textStatus, "error");                         
              }
        });
    }






    function RefrescarGrid() {

        var grid = $("#gridTax").getKendoGrid();
        grid.dataSource.read();

    }

   //funcion para eliminar
    function Delete(e) {
        if (confirm('¿Seguro que quiere eliminar este registro?')) {
            debugger
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            $.ajax({
               url: '@Url.Action("Delete", "Tax")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                //data: { Id: dataItem.UnitOfMeasureId },
                success: function (data) {
                    var grid = $("#gridTax").data("kendoGrid");
                    grid.dataSource.remove(dataItem);
                    $("#titulo").text("Eliminar Impuesto");
                },
                 error: function (XMLHttpRequest, textStatus, errorThrown) {
                     swal("Error", textStatus, "error");
                  }
            });
        }
    }

</script>

<h3 class="text-themecolor">Impuestos</h3>

@(Html.Kendo().Grid<ERPMVC.Models.Tax>()

                    .Name("gridTax")

                    .Columns(columns =>
                    {
                        columns.Command(command =>
                        {
                            //command.Custom("Ver detalles").Click("Detalles");
                            command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditTax");
                            command.Custom("Eliminar").Click("Delete").IconClass("fa fa-trash").Text(" ");
                        }).Width(250).Title("Acciones");
                        columns.Bound(p => p.TaxId).Width(190);
                        columns.Bound(p => p.TaxCode).Width(190);
                        columns.Bound(p => p.Description).Width(190);
                        columns.Bound(p => p.Estado).Width(190);
                        columns.Bound(p => p.TaxPercentage).Width(190);
                    })


                    .ToolBar(tools =>
                    {

                        //tools.Create();
                        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                        .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddTax()" });
                        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                    })
                    .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                    .Sortable()
                    .Pageable()
                    .Filterable()
                    .Scrollable()
                    .Pdf(pdf => pdf.FileName("TaxReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                    .Excel(excel => excel.FileName("TaxReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                    .DataSource(dataSource =>
                    dataSource
                    .WebApi()

                    .ServerOperation(true)
                    .Model(model =>
                    {
                        model.Id(p => p.TaxId);
                        model.Field(p => p.TaxId).Editable(false);

                    })
                    .Events(events => events.Error("error_handler"))
                    .Read(read => read.Action("Get", "Tax"))
                    .Create(create => create.Action("Insert", "Tax").Type(HttpVerbs.Post))
                    .Update(update => update.Action("Update", "Tax").Type(HttpVerbs.Post))
                    .Destroy(destroy => destroy.Action("Delete", "Tax", new { TaxId = "{0}" }).Type(HttpVerbs.Delete))
                    )
                    .Events(e =>
                    {
                        e.Save("onsave");

                    })
)


<script>
    //para los tools tips
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridTax").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridTax").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir registro");
    setRowButtonTooltip(".k-grid-ImprimirBoletaDeSalida", "Imprimir Boleta de salida");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>
<div id="numTax">
    @await Html.PartialAsync("pvwAddTax", new ERPMVC.DTO.TaxDTO { TaxId = 0 })
</div>

