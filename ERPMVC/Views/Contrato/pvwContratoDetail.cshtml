@model ERPMVC.Models.Contrato_Detalle
@{
    var Linea = ViewData["producto"] as IEnumerable<ERPMVC.Models.Product>;
}
<style>
    #gridCotizacionesDetail .k-grid-content {
        min-height: 400px;
        max-height: 500px;
    }
</style>
<script>
    //saca totales, aplica formulas en el detalle
    function CalcularTotal() {
        debugger;
        var quantity = $("#Cantidad").val();
        var price = $("#Precio").val();
        var Monto = quantity * price;
        setearvalor("Monto", Monto);
    }
    //saca totales, aplica formulas generales dependiendo la prima
    function CalcularTotalprima() {
        debugger;
        var displayedData = $("#gridContratoDetail").data().kendoGrid.dataSource.view();
        var SinFinaciar = 0, Impuesto = 0, ValorContado = 0, PrimaMonto = 0, ValorPrima = 0;
        var SaldoCredito = 0, ValorCuota = 0, TotalContrato = 0, InteresesFinaciar = 0, Finaciar = 0, primaIngresada = $("#ValorPrima").val();

        $(displayedData).each(function (index, element) {
            var t = JSON.parse(JSON.stringify(element));
            SinFinaciar = SinFinaciar + t["Monto"];
            console.log("sd" + SinFinaciar);
            ISVMonto = t["Monto"] * (t["Tax"] / 100);
            Impuesto = Impuesto + ISVMonto;
            PrimaMonto = t["PorcentajeDescuento"] * t["Cantidad"];//PorcentajeDescuento almacena el valor de prima(en la base de datos)
            ValorPrima = ValorPrima + PrimaMonto;

            ValorContado = SinFinaciar + Impuesto;
            Finaciar = ValorContado - ValorPrima;

            SaldoCredito = (ValorContado - ValorPrima) * (1 + t["FundingInterestRate"]/100);

        });
        primaIngresada = parseFloat(primaIngresada)

        //condicion de validacion de prima
        debugger;
        if (primaIngresada == "0") { }
        else if (primaIngresada > ValorPrima) {
            ValorPrima = primaIngresada;
            $(displayedData).each(function (index, element) {
                var t = JSON.parse(JSON.stringify(element));

                SaldoCredito = (ValorContado - ValorPrima) * (1 + t["FundingInterestRate"]/100);
            });
        } else if (primaIngresada < ValorPrima) {
            alert("La prima ingresada es menor al monto permitido.");
        }
        ValorCuota = (SaldoCredito / $("#txtplazo").val());
        TotalContrato = (ValorCuota * $("#txtplazo").val()) + ValorPrima;
        InteresesFinaciar = TotalContrato - ValorContado;

        setearvalor('SinFinaciar', SinFinaciar);
        setearvalor('Impuesto', Impuesto);
        setearvalor('PrimaMonto', PrimaMonto);
        setearvalor('ValorPrima', ValorPrima);
        setearvalor('Finaciar', Finaciar);
        setearvalor('ValorContado', ValorContado);

        setearvalor('SaldoCredito', SaldoCredito);
        setearvalor('ValorCuota', ValorCuota);
        setearvalor('TotalContrato', TotalContrato);
        setearvalor('InteresesFinaciar', InteresesFinaciar);



    }
    //sacar totales , aplicar formulas para la maestro
    function CalcularTotalDocumento() {
        debugger;
        var displayedData = $("#gridContratoDetail").data().kendoGrid.dataSource.view();
        var SinFinaciar = 0, Impuesto = 0, ValorContado = 0, PrimaMonto = 0, ValorPrima = 0;
        var SaldoCredito = 0, ValorCuota = 0, TotalContrato = 0, InteresesFinaciar = 0, Finaciar = 0;



        $(displayedData).each(function (index, element) {
            var t = JSON.parse(JSON.stringify(element));
            SinFinaciar = SinFinaciar + t["Monto"];
            console.log("sd" + SinFinaciar);
            ISVMonto = t["Monto"] * (t["Tax"] / 100);
            Impuesto = Impuesto + ISVMonto;
            PrimaMonto = t["PorcentajeDescuento"] * t["Cantidad"];//PorcentajeDescuento almacena el valor de prima(en la base de datos)
            ValorPrima = ValorPrima + PrimaMonto;
            ValorContado = SinFinaciar + Impuesto;
            Finaciar = ValorContado - ValorPrima;
            SaldoCredito = (ValorContado - ValorPrima) * (1 + t["FundingInterestRate"] / 100);

        });
        ValorCuota = (SaldoCredito / $("#txtplazo").val());
        TotalContrato = (ValorCuota * $("#txtplazo").val()) + ValorPrima;
        InteresesFinaciar = TotalContrato - ValorContado;

        setearvalor('SinFinaciar', SinFinaciar);
        setearvalor('Impuesto', Impuesto);
        setearvalor('PrimaMonto', PrimaMonto);
        setearvalor('ValorPrima', ValorPrima);
        setearvalor('Finaciar', Finaciar);
        setearvalor('ValorContado', ValorContado);

        setearvalor('SaldoCredito', SaldoCredito);
        setearvalor('ValorCuota', ValorCuota);
        setearvalor('TotalContrato', TotalContrato);
        setearvalor('InteresesFinaciar', InteresesFinaciar);



    }
    //Setear valores
    function setearvalor(nombrenumerico, valor) {
        var numeric = $("#" + nombrenumerico).data("kendoNumericTextBox");
        numeric.value(valor);
        numeric.trigger('change');
        numeric = null;
    }
    //solo acepte numeros
    function soloNumeros(e) {
        var key = window.Event ? e.which : e.keyCode
        return ((key >= 48 && key <= 57) || (key == 8))
    }
    //para mostrar campos dependiendo del producto
    $(document).ready(function () {
        $("#Serie").hide();
        $("#Modelo").hide();

    });
    //para cargar campos dependientes de producto
    function SetProductName(e) {
        if ($("#ProductId").val() > 0) {
            debugger

            var numerictextbox = $("#Cantidad").data("kendoNumericTextBox");
            numerictextbox.focus();

            $("#ProductName").val($("#ProductId").data("kendoDropDownList").text());
            var dataObject = { ProductId: $("#ProductId").val()};
                $.ajax({
                url: '@Url.Action("GetProductById", "Product")',
                method: 'GET',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: dataObject,
                success: function (result) {
                    $("#DescriptionDetail").val(result.Description);
                    $("#Precio").val(result.DefaultSellingPrice);

                    debugger
                    $("#Prueba").val(result.FundingInterestRateId);
                    $("#PruebaTax").val(result.TaxId);
                    $("#prima").val(result.Valor_prima);
                    $("#PorcentajePrima").val(result.Prima+"%");
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
            if ($("#Prueba").val() > 0) {
                var dataObject = { FundingInterestRateId: $("#Prueba").val()};
                $.ajax({
                url: '@Url.Action("GetFundingInterestRate", "FundingInterestRate")',
                method: 'GET',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: dataObject,
                success: function (result) {
                    $("#Funding").val(result.Rate);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
                });
            }
            if ($("#PruebaTax").val() > 0) {
                var dataObject = { TaxId: $("#PruebaTax").val()};
                $.ajax({
                url: '@Url.Action("GetTaxById", "Tax")',
                method: 'GET',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: dataObject,
                success: function (result) {
                    $("#PorcentajeTax").val(result.TaxPercentage);
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
                });
            }
        }
        else
        {
           $("#SalesOrderName").prop('disabled', false);
        }


         if ($("#ProductId").val() == 0) {
                    $("#Existencia").val(0);
        }
        else {
            $.ajax({
            type: "POST",
            url: "@Url.Action("VerSaldo", "KardexViale")",
            data: $("#ProductId").val(),
            contentType: "application/json; charset=utf-8",
         dataType: "json",
            success: function (data) {
                console.log(data);
                    $("#Existencia").val(data);
                },
            error: function (req, status, error) {
                alert(error);
            }
        });

            }



    }
    //get para agregar un registro al grid
    function GetContratoDetalle() {
        //closesaleorderline();
        var subproductname = '', unidaddemedida = '';
        if ($("#UnitOfMeasureId") != null) {
            if ($("#UnitOfMeasureId").data("kendoDropDownList") != null) {
                unidaddemedida = $("#UnitOfMeasureId").data("kendoDropDownList").text();
            }
        }
        if ($("#ProductId") != null) {
            if ($("#ProductId").data("kendoDropDownList") != null) {
                subproductname = $("#ProductId").data("kendoDropDownList").text();
            }
        }

        var displayedData = $("#gridContratoDetail").data().kendoGrid.dataSource.data();
        var id = -999999;
         debugger;
        if (Number($("#Contrato_detalleId").val()) === 0) {
            if (displayedData.length > 0) {
                for (var i = 0; i < displayedData.length; i++) {
                    if (displayedData[i].Contrato_detalleId > id)
                        id = displayedData[i].Contrato_detalleId;

                }
                id = id + 1;
            }
            else if ($("#ProductId").val()>0) {
                id = 1;
            }
        }
        else {
            id = $("#Contrato_detalleId").val(0);
        }
        return {
            Contrato_detalleId: id,
            ContratoId: @Model.ContratoId,
            ProductId: $("#ProductId").val(),
            Cantidad: $("#Cantidad").val(),
            Precio: $("#Precio").val(),
            Serie: $("#Serie").val(),
            Modelo: $("#Modelo").val(),
            Monto: $("#Monto").val(),
            FundingInterestRate: $("#Funding").val(),
            Tax: $("#PorcentajeTax").val(),
            Valor_prima: $("#prima").val(),
            PorcentajeDescuento: $("#prima").val(),
            }
    }
    //metodo que levanta el boton agregar
    function AddContratoDetalle(e)  {
         var cant = $("#Cantidad").val();
        var exis = $("#Existencia").val();
        if ($("#txtplazo").val() == 0) {
            swal("Error", "El Plazo no puede ser 0.");
        }else if ($("#Cantidad").val() == 0) {
            swal("Error", "La Cantidad no puede ser 0.");
        }else if ($("#ProductId").val() == 0 ) {
            swal("Error", "seleccione todos los campos");
        } else if (parseInt(exis) < parseInt(cant)) {
             swal("Error", "Na hay suficiente existencia.");
        } else if ($("#ProductId").val() > 0) {
            try {
                RefreshCotizacionesDetail();
                //completedorderlinemant();
                CalcularTotalDocumento();
                $("#Serie").hide();
                $("#Modelo").hide();
            } catch (e) {
                $("#btnActualizarCotizacionLinea").prop("disabled", false);
            }
        }
    }

    //agrega y refresca en el grid
    function RefreshCotizacionesDetail() {
        debugger;
        var grid = $("#gridContratoDetail").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();
        $("#Contrato_detalleId").val(0);
        $("#ProductId").data("kendoDropDownList").value(0);
        $("#ContratoId").val('');
        $("#Serie").val(0);
        $("#Precio").val(0);
        $("#Modelo").val(0);
        $("#DescriptionDetail").val('');
        $("#Cantidad").data("kendoNumericTextBox").value('0');
        $("#Funding").val(0);
        $("#PorcentajeTax").val(0);
        $("#prima").val(0);
        $("#Prueba").val(0);
        $("#PruebaTax").val(0);
        $("#Existencia").val(0);
        $("#PorcentajePrima").val(0);

    }
    //recargar la pantalla y limpia la variable de sesion
    $(document).ready(function () {
        clearsession()
   });

    //metodo para eliminar
    function Delete(e) {
        if (confirm('Esta seguro que desea eliminar la fila?')) {
            debugger
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            $.ajax({
               url: '@Url.Action("Delete", "Contrato_Detalle")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                success: function (data) {
                    var grid = $("#gridContratoDetail").data("kendoGrid");
                    grid.dataSource.remove(dataItem);
                    $("#titulo").text("Eliminar Contrato detalle");
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    swal("Error", textStatus, "error");
                }
            });
        }
    }

</script>

@{
    var messages1 = new Dictionary<string, string>() { { "custom", "Ingrese un valor correcto." },
                    {"required","Valor requerido" }
                 };
    var rules1 = new Dictionary<string, string>() { { "custom", "customFunction" } };
}

    <div class="row">
        <div class="col-lg-12">
            <form id="frmcotizar" kendo-validator="true"
                  method="post" class="validation-wizard wizard-circle">
                <div class="row" id="div1">
                    <div class="row" hidden>
                        <div class="col-md-0" hidden>
                            <div class="form-group">
                                <label asp-for="ContratoId" class="control-label" style="width:100%"></label>
                                <input type="number" asp-for="ContratoId" class="form-control" style="min-width:100%" disabled />

                            </div>
                        </div>
                        <div class="col-md-0" hidden>
                            <div class="form-group">
                                <label asp-for="Contrato_detalleId" class="control-label" style="width:100%"></label>
                                <input type="number" asp-for="Contrato_detalleId" class="form-control" style="min-width:100%" disabled value="@Model.Contrato_detalleId" />

                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-4">
                            <div class="form-group">
                                <label asp-for="ProductId" class="control-label" style="width:100%"></label>
                                <kendo-dropdownlist name="ProductId" id="ProductId" filter="Kendo.Mvc.UI.FilterType.Contains"
                                                    for="ProductId"
                                                    option-label="Seleccione el Producto"
                                                    datatextfield="ProductName"
                                                    datavaluefield="ProductId"
                                                    data-validate="false"
                                                    onchange="SetProductName();"
                                                    onkeypress=""
                                                    style="width: 100%;">
                                    <datasource type="DataSourceTagHelperType.WebApi">
                                        <transport>
                                            <read url="@Url.Action("GetProductConcatenado", "Product")" />
                                        </transport>
                                    </datasource>
                                </kendo-dropdownlist>
                                <span asp-validation-for="ProductId" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label asp-for="Precio" class="control-label" style="width:100%"></label>
                                <input type="text" id="Precio" readonly required asp-for="Precio" onchange="CalcularTotal();" class="k-textbox" style="min-width:100%" />
                                <span asp-validation-for="Precio" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-2" id="Existencia1">
                            <div class="form-group">
                                <label class=" control-label" style="width:100%">Existencias</label>
                                <input type="text" id="Existencia" class="k-textbox" maxlength="15" style="width:100%" readonly />
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label class=" control-label" style="width:100%">Prima%</label>
                                <input class="k-textbox" type="text" id="PorcentajePrima" maxlength="3" style="width:100%"  />
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="form-group">
                                <label asp-for="Cantidad" class="control-label" style="width:100%"></label>
                                <kendo-numerictextbox name="Cantidad"
                                                      format="#"
                                                      decimals="0"
                                                      min="0"
                                                      required
                                                      onchange="CalcularTotal();"
                                                      style="width:100%"
                                                      value="Model.Cantidad" />
                                <span asp-validation-for="Cantidad" class="text-danger"></span>
                            </div>
                        </div>

                        <div class="col-md-12">
                            <div class="form-group">
                                <label class="control-label" style="width:100%">Descripción</label>
                                <input type="text" id="DescriptionDetail" readonly required class="k-textbox" style="min-width:100%" />
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-md-3" id="Serie">
                            <div class="form-group">
                                <label asp-for="Serie" class="control-label" style="width:100%"></label>
                                <input type="text" id="Serie" required asp-for="Serie" class="form-control" style="min-width:100%" />
                                <span asp-validation-for="Serie" class="text-danger"></span>
                            </div>
                        </div>
                        <div class="col-md-3" id="Modelo">
                            <div class="form-group">
                                <label asp-for="Modelo" class="control-label" style="width:100%"></label>
                                <input type="text" id="Modelo" required asp-for="Modelo" class="form-control" style="min-width:100%" />
                                <span asp-validation-for="Modelo" class="text-danger"></span>
                            </div>
                        </div>
                    </div>
                    <div class="row" hidden>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label asp-for="Monto" class="control-label" style="width:100%"></label>
                                <kendo-numerictextbox name="Amount"
                                                      format="n2"
                                                      id="Monto"
                                                      spinners="false"
                                                      min="0"
                                                      required
                                                      step="1"
                                                      style="width:100%"
                                                      value="Model.Monto" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label asp-for="FundingInterestRate" class="control-label" style="width:100%"></label>
                                <input type="text" id="Prueba" required asp-for="FundingInterestRate" class="form-control" style="min-width:100%" />
                                <input type="text" id="Funding" required asp-for="FundingInterestRate" class="form-control" style="min-width:100%" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label asp-for="Valor_prima" class="control-label" style="width:100%"></label>
                                <input type="text" id="prima" asp-for="PorcentajeDescuento" required class="form-control" style="min-width:100%" />
                            </div>
                        </div>
                        <div class="col-md-3">
                            <div class="form-group">
                                <label asp-for="Tax" class="control-label" style="width:100%"></label>
                                <input type="text" id="PruebaTax" required asp-for="Tax" class="form-control" style="min-width:100%" />
                                <input type="text" id="PorcentajeTax" required asp-for="Tax" class="form-control" style="min-width:100%" />
                            </div>
                        </div>
                    </div>
                </div>
                <div>
                    <button id="btnActualizarContratoDetalle" type="submit" class="btn btn-success float-right" onclick="AddContratoDetalle()">Añadir producto</button>
                </div>
            </form>
        </div>
    </div>


    <div class="box">
        <div class="box-body">
            @(Html.Kendo().Grid<ERPMVC.Models.Contrato_Detalle>()
                                                                    .Name("gridContratoDetail")
                                                                    .Columns(columns =>
                                                                    {
                                                                        if (Model.ver == 0)
                                                                        {
                                                                            columns.Command(command =>
                                                                    {
                                                                        command.Custom("Eliminar").Click("Delete").IconClass("fa fa-trash").Text(" ");

                                                                    }).Width(100).Title("Acciones");
                                                                        }

                                                                        columns.Bound(p => p.ContratoId).Title("Id Linea").Width(150).Visible(false);
                                                                        columns.Bound(p => p.Contrato_detalleId).Title("Cotización Id").Width(150).Visible(false);
                                                                //columns.Bound(p => p.ProductId).Title("Producto").Width(150);
                                                                columns.ForeignKey(p => p.ProductId, (System.Collections.IEnumerable)ViewData["producto"], "ProductId", "ProductName").Title("Nombre").Width(150);
                                                                        columns.ForeignKey(p => p.ProductId, (System.Collections.IEnumerable)ViewData["producto"], "ProductId", "ProductCode").Title("Codigo").Width(150);
                                                                        columns.Bound(p => p.Cantidad).Title("Cantidad").Width(150);
                                                                        columns.Bound(p => p.Precio).Title("Precio").Width(150).Format("{0:C}");
                                                                        columns.Bound(p => p.Serie).Title("No Serie").Width(150).Visible(false);
                                                                        columns.Bound(p => p.Modelo).Title("Modelo").Width(150).Visible(false);
                                                                        columns.Bound(p => p.PorcentajeDescuento).Title("Descuentos").Width(150).Visible(false);
                                                                        columns.Bound(p => p.Tax).Title("Impuesto").Width(150).Visible(false);
                                                                        columns.Bound(p => p.FundingInterestRate).Title("Interes").Width(150).Visible(false);
                                                                        columns.Bound(p => p.Monto).Title("Total").Width(150).Visible(true).Format("{0:C}");
                                                                    })
                                                                        .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                .Clear()
                                                                .Contains("Contiene")
                                                                .DoesNotContain("No contiene")
                                                                .EndsWith("Termina con")
                                                                .IsEqualTo("Es igual a")
                                                                .IsNotEqualTo("No es igual a")
                                                                .IsNull("Es nulo")
                                                                .StartsWith("Inicia con")


                                                            )
                                                            .ForNumber(n => n
                                                            .Clear()
                                                            .IsEqualTo("Es igual a")
                                                            .IsGreaterThan("Es mayor que")
                                                            .IsLessThan("Es menor que")
                                                            .IsNull("Es nulo")
                                                            .IsLessThanOrEqualTo("Es menor o igual que")
                                                            .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                            )
                                                            .ForDate(d => d
                                                            .Clear()
                                                            .IsEqualTo("Es igual que")
                                                            .IsGreaterThan("Es mayor que")
                                                            .IsLessThan("Es menor que")
                                                            .IsLessThanOrEqualTo("Es menor o igual que")
                                                            .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                            .IsNotEqualTo("No es igual que")
                                                            )
                                                        ))
                                                                    .ToolBar(tools =>
                                                                    {
                                                                //tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                                //tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });
                                                            })
                                                                    .Editable(e => e.Mode(GridEditMode.PopUp))
                                                                    .Sortable()
                                                                    .AutoBind(true)
                                                                    .Pageable()
                                                                    .Events(e => e.DataBound("CalcularTotalDocumento"))
                                                                    .Filterable()
                                                                    .Scrollable()
                                                                    // .ClientDetailTemplateId("template")
                                                                    .Pdf(pdf => pdf.FileName("ContratoDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                        .Excel(excel => excel.FileName("ContratoDetalleReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                    //.Events(e=>e.Save("onsave"))
                                                                    .DataSource(dataSource =>

                                                                    dataSource
                                                                    //.Ajax()
                                                                    .WebApi()

                                                                    .ServerOperation(true)
                                                                    .Model(model =>
                                                                    {
                                                                        model.Id(p => p.Contrato_detalleId);
                                                                        model.Field(p => p.Contrato_detalleId).Editable(false);
                                                                        model.Field(p => p.Contrato_detalleId).Editable(false);

                                                                    })
                                                                    .Events(events =>
                                                                    {
                                                                        events.Error("error_handler");

                                                                    })
                                                                .Read(read => read.Action("GetContratoDetalle", "Contrato_Detalle").Data("GetContratoDetalle"))
                                                                //.Create(create => create.Action("Insert", "SalesOrderLine"))
                                                                //.Update(update => update.Action("Update", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                                                //.Destroy(destroy => destroy.Action("Delete", "SalesOrderLine", new { SalesOrderLineId = "{0}" }))
                                                                )
            )
        </div>
    </div>
