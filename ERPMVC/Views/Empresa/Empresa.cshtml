@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Empresa";

}

<script>

    function onsave(e) {
        //   console.log(new Date(e.model.FechaRecepcion).toISOString());
        // e.model.set('FechaRecepcion', new Date(e.model.FechaRecepcion).toISOString());
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddEmpresa() {

        $('#ModalEmpresa').find(':input').not(':submit').val('');
        $('#ModalEmpresa').modal('show');
        $("#EmpresaId").val('0');




    }


    function EditEmpresa(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            IdEmpresa: dataItem.IdEmpresa,
            editar: 0
        };

        $.ajax({
            url: '@Url.Action("pvwAddEmpresa", "Empresa")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#numEmpresa").html('');
                $("#numEmpresa").html(result);


                //$("#btnCAI").hide();
                $('#ModalEmpresa').modal('show');
            },
            error: function (XMLHttpRequest, textStatus, errorThrown) {
                alert(textStatus + ": " + XMLHttpRequest.responseText);
            }
        });
    }

    function RefrescarGrid() {
        var grid = $("#gridEmpresa").getKendoGrid();
        grid.dataSource.read();
    }


</script>

<h3 class="text-themecolor">Empresa</h3>

@(Html.Kendo().Grid<ERPMVC.Models.Empresa>
            ()

            .Name("gridEmpresa")

            .Columns(columns =>
            {
                columns.Command(command =>
                {
                    //command.Custom("Ver detalles").Click("Detalles");
                    command.Custom("Editar").Click("EditEmpresa");
                    command.Destroy().Text("Eliminar");
                }).Width(250);
                columns.Bound(p => p.IdEmpresa).Width(150);
                columns.Bound(p => p.NombreEmpresa).Width(170);
                columns.Bound(p => p.NombreContacto).Width(170);
                columns.Bound(p => p.Telefono).Width(170);
                columns.Bound(p => p.Direccion).Width(170);
                // columns.Bound(p => p.Telefono).Width(170);



            })


            .ToolBar(tools =>
            {

                //tools.Create();
                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                            .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddEmpresa()" });
                tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


            })
            .Editable(e => e.Mode(GridEditMode.PopUp))
            .Sortable()
            .Pageable()
            .Filterable()
            .Scrollable()
            .Pdf(pdf => pdf.FileName("EmpresaReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
            .ProxyURL(Url.Action("Export", "Home")).AllPages())
            .Excel(excel => excel.FileName("EmpresaReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
            + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
            .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
            .DataSource(dataSource =>
            dataSource
            .WebApi()

            .ServerOperation(true)
            .Model(model =>
            {
                model.Id(p => p.IdEmpresa);
                model.Field(p => p.IdEmpresa).Editable(false);


            })
            .Events(events => events.Error("error_handler"))
            .Read(read => read.Action("Get", "Empresa"))
            .Create(create => create.Action("Insert", "Empresa").Type(HttpVerbs.Post))
            .Update(update => update.Action("Update", "Empresa").Type(HttpVerbs.Post))
            .Destroy(destroy => destroy.Action("Delete", "Empresa").Type(HttpVerbs.Post))

            )
            .Events(e =>
            {
                e.Save("onsave");

            })
)

<div id="numEmpresa">
    @await Html.PartialAsync("pvwAddEmpresa", new ERPMVC.DTO.EmpresaDTO { IdEmpresa = 0 })
</div>
