@using Microsoft.AspNetCore.Http;
@*@using Microsoft.AspNetCore.Authorization
    @inject IAuthorizationService AuthorizationService*@
<script>
    function GetProductIdS() {
        return { 'ProductId': $("#ProductId").val() }
    }
    $(document).ready(function () {
        clearsession();
    });
    function RefrescarGridLinea() {

        var grid = $("#gridCotizacionesDetail").getKendoGrid();
        grid.dataSource.read();
        grid.refresh();

        $("#SalesOrderLineId").val(0);

    }
    function clearsession() {
        var dataObject = ["listadoproductos"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }
    //----------------------------------
     function DetallesInsert(e) {
         window.location.href = "@Url.Action("Details", "SalesOrder")";
         RefreshCotizacionesDetail();
         clearsession();
         RefrescarGridLinea();
         var dataSource = $("#gridCotizacionesDetail").data("kendoGrid").dataSource;
         var raw = dataSource._data;
         console.log(raw);
         //debugger;
         for (var i = dataSource._data.length - 1; i >= 0; i--) {
             item = raw[i];
             dataSource.remove(item);
         }
    }
    function AddCotizacion() {
        clearsession();
        RefrescarGridLinea();
        var dataSource = $("#gridCotizacionesDetail").data("kendoGrid").dataSource;
        var raw = dataSource._data;
        console.log(raw);
        debugger;
        for (var i = dataSource._data.length - 1; i >= 0; i--) {
            item = raw[i];
            dataSource.remove(item);
        }
        $("#SalesOrderId").val('0');

         var dataObject = {
            SalesOrderId: 0,
            editar : 1
        };

        $.ajax({
            url: '@Url.Action("Details","SalesOrder")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                RefreshCotizacionesDetail();
                 $("#btnSaveCotizacion").show();
                 window.location.href = "@Url.Action("Details", "SalesOrder")";
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }
    //------------------------
    function DetallesEdit(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        
        window.location.href = "@Url.Action("Details", "SalesOrder")?SalesOrderId=" + dataItem.SalesOrderId;
    }
    function EditCotizacion(e) {
        e.preventDefault();
        clearsession();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            SalesOrderId: dataItem.SalesOrderId,
            editar : 0
        };
        var CustomerId = 0;
        $.ajax({
            url: '@Url.Action("Details", "SalesOrder")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#salesorder").html('');
                $("#salesorder").html(result);
                var txt = $(result);
                var found = $("#CustomerId", txt);
                CustomerId = $(found).val();
                window.location.href = "@Url.Action("Details", "SalesOrder")?SalesOrderId=" + dataItem.SalesOrderId;
                $("#CustomerId").data("kendoDropDownList").dataSource.read();
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });

        $("#CustomerId").data("kendoDropDownList").value(CustomerId);
    }

    function ImprimirCotizacion(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        var url =  '@Url.Action("SFCotizacion", "SalesOrder")/' + dataItem.SalesOrderId;
        var win = window.open(url, '_blank');
        win.focus();
    }


    function closecondition() {
        $('#myModalConditions').modal('hide');
    }



    //$("#gridCotizaciones").kendoTooltip({
    //    filter: ".k-grid-custom",
    //    content: function (e) {
    //        return "Click here";
    //    }
    //});
    //});

    function GenerarContrato(e) {
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (dataItem.IdEstado == 6) {
            if (confirm('Esta seguro de generar un contrato?')) {
                e.preventDefault();

                var dataObject = {
                    SalesOrderId: dataItem.SalesOrderId,
                    editar: 0
                };

                $.ajax({
                    url: '@Url.Action("GenerarContrato","SalesOrder")',
                    method: 'POST',
                    datatype: "json",
                    contentType: 'application/json',
                    async: false,
                    data: JSON.stringify(dataObject),
                    success: function (result) {

                        RefrescarGrid();
                        $.toast({
                            heading: 'Satisfactorio',
                            text: 'Contrato generado correctamente.',
                            position: 'top-right',
                            loaderBg: '#ff6849',
                            icon: 'success',
                            hideAfter: 7000,
                            stack: 6
                        });

                    },
                    error: function (XMLHttpRequest, textStatus, errorThrown) {
                        notification.show({
                            title: "Validacion",
                            message: textStatus + ": " + XMLHttpRequest.responseText
                        }, "error");
                        alert(textStatus + ": " + XMLHttpRequest.responseText);
                    }
                });
            }
        }
        else {
            notification.show({
                title: "Validacion",
                message: "La cotización no ha sido aprobada"
            }, "error");
        }
    }


    function AprobarCotizacion(e) {
        var notification = $("#notification").data("kendoNotification");
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        if (dataItem.IdEstado != 6) {
        if (confirm('Esta seguro de aprobar esta cotización?')) {
            e.preventDefault();
        
            var dataObject = {
                SalesOrderId: dataItem.SalesOrderId,
                editar: 0
            };

            $.ajax({
                url: '@Url.Action("Aprobar","SalesOrder")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $.toast({
                        heading: 'Satisfactorio',
                        text: '<br/><br/>Contrato generado correctamente.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 7000,
                        stack: 6
                    });

                    RefrescarGrid();

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    notification.show({
                        title: "Validación",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
            }
        }
        else {
            notification.show({
                title: "Validación",
                message: "<br/><br/>La cotización no ha sido aprobada"
            }, "error");
        }
    }

    function CreateCustomer(e) {
        var notification = $("#notification").data("kendoNotification");
        if (confirm('Esta seguro de crear este cliente?')) {
            e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                SalesOrderId: dataItem.SalesOrderId,
                editar: 0
            };

            $.ajax({
                url: '@Url.Action("InsertCustomerFromSalesOrder", "Customer")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {

                    RefrescarGrid();
                    $.toast({
                        heading: 'Satisfactorio',
                        text: 'Contrato generado correctamente.',
                        position: 'top-right',
                        loaderBg: '#ff6849',
                        icon: 'success',
                        hideAfter: 7000,
                        stack: 6
                    });

                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    notification.show({
                        title: "Validacion",
                        message: textStatus + ": " + XMLHttpRequest.responseText
                    }, "error");
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
        }
    }


    function dataBound(e) {
        $.each(this.dataSource.data(), function () {
           // console.log(this);
            if (Number(this.IdEstado) !=5) {
              //  console.log(this.SalesOrderId);
                $('[data-uid=' + this.uid + ']').find('.k-grid-Aprobar').hide();

            }
            if (Number(this.CustomerId) > 0) {
                $('[data-uid=' + this.uid + ']').find('.k-grid-CrearCliente').hide();
            }
        })
    }

    function RefrescarGrid() {

        var grid = $("#gridCotizaciones").getKendoGrid();
        grid.dataSource.read();

    }

</script>

<h3 class="text-themecolor">Cotización</h3>

<div id="example">

    @{
        bool Gerente = false;
        //if (await HasPolicyAsync(Enum.GetName(typeof(Politicas),0)))
        if (await HasPolicyAsync(Politicas.GG))
        {
            Gerente = true;
        }

    }

    @(Html.Kendo().Grid<ERPMVC.Models.SalesOrder>()
                                                                          .Name("gridCotizaciones")
                                                                          .Columns(columns =>
                                                                          {
                                                                              columns.Command(command =>
                                                                              {
                                                                                  command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("DetallesEdit");
                                                                                  command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirCotizacion");
                                                                                  //command.Custom("GenerarContrato").Text(" ").IconClass("fa fa-file-import").Click("GenerarContrato");

                                                                                  //command.Custom("CrearCliente").Text(" ").IconClass("fa fa-address-card").Click("CreateCustomer");

                                                                                  //if (Gerente)
                                                                                  //{
                                                                                  //    command.Custom("Aprobar").Text(" ").IconClass("fa fa-thumbs-up").Click("AprobarCotizacion");
                                                                                  //}


                                                                                  //  command.Edit(); command.Destroy();
                                                                              }).Width(220);

                                                                              columns.Bound(p => p.SalesOrderId).Title("Id").Width(180).Title("No");
                                                                              columns.Bound(p => p.OrderDate).Format("{0:dd/MM/yyyy}").Title("Fecha Cotización").Width(180);
                                                                              columns.Bound(p => p.CustomerName).Title("Cliente").Width(150);
                                                                              columns.Bound(p => p.CustomerRefNumber).Title("Código referencia").Width(170);
                                                                              columns.Bound(p => p.Discount).Title("Descuentos").Width(180);
                                                                              columns.Bound(p => p.Estado).Title("Estado").Width(170);
                                                                              columns.Bound(p => p.IdEstado).Hidden().Title("Estado").Width(170);
                                                                              //columns.Bound(p => p.BranchId).Title("Branch Id").Width(150);
                                                                              columns.Bound(p => p.BranchName).Title("Sucursal").Width(170);
                                                                              columns.Bound(p => p.Freight).Title("Flete").Width(170);
                                                                              columns.Bound(p => p.SubTotal).Title("Sub Total").Format("{0:n2}").Width(170);
                                                                              columns.Bound(p => p.Tax).Title("Total Impuesto").Format("{0:n2}").Width(170);
                                                                              columns.Bound(p => p.Total).Title("Total").Format("{0:n2}").Width(170);
                                                                          })
                                                                  .Filterable(f => f.Operators(o => o.ForString(s => s
                                                                           .Clear()
                                                                           .Contains("Contiene")
                                                                           .DoesNotContain("No contiene")
                                                                           .EndsWith("Termina con")
                                                                           .IsEqualTo("Es igual a")
                                                                           .IsNotEqualTo("No es igual a")
                                                                           .IsNull("Es nulo")
                                                                           .StartsWith("Inicia con")
                                                                     )
                                                                     .ForNumber(n => n
                                                                       .Clear()
                                                                       .IsEqualTo("Es igual a")
                                                                       .IsGreaterThan("Es mayor que")
                                                                       .IsLessThan("Es menor que")
                                                                       .IsNull("Es nulo")
                                                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                     )
                                                                     .ForDate(d => d
                                                                     .Clear()
                                                                     .IsEqualTo("Es igual que")
                                                                     .IsGreaterThan("Es mayor que")
                                                                     .IsLessThan("Es menor que")
                                                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                                                     .IsNotEqualTo("No es igual que")
                                                                      )
                                                                   ))
                                                              .ToolBar(tools =>
                                                              {
                                                                  // tools.Create();
                                                                  tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                                                                                 .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "DetallesInsert();" });

                                                                  tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                                                  tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });


                                                              })

                                                               .Editable(e => e.Mode(GridEditMode.PopUp))
                                                                .Sortable()
                                                                .AutoBind(true)
                                                                .Pageable()
                                                                .Filterable()
                                                                .Scrollable()
                                                                // .ClientDetailTemplateId("template")
                                                                .Pdf(pdf => pdf.FileName("CotizacionReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                                                .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                                                  .Excel(excel => excel.FileName("CotizacionReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                                                + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                                                .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                                                .Events(e => e.DataBound("dataBound"))
                                                                //.Events(e=>e.Save("onsave"))
                                                                .DataSource(dataSource =>

                                                               dataSource
                                                               //.Ajax()
                                                               .WebApi()
                                                                .ServerOperation(true)
                                                                .Model(model =>
                                                                {
                                                                    model.Id(p => p.SalesOrderId);
                                                                    model.Field(p => p.SalesOrderId).Editable(true);
                                                                    model.Field(p => p.SalesOrderId).Editable(true);


                                                                })
                                                                .Events(events =>
                                                                {

                                                                    events.Error("error_handler");
                                                                    //events.upda("EditHandler");

                                                                })
                                                                .Read(read => read.Action("GetSalesOrder", "SalesOrder"))
                                                                .Create(create => create.Action("Insert", "SalesOrder"))
                                                                .Update(update => update.Action("Update", "SalesOrder", new { id = "{0}" }))
                                                                .Destroy(destroy => destroy.Action("Delete", "SalesOrder", new { id = "{0}" }))
                                                          )
    )
</div>

@*<div id="salesorder" hidden>
    @await Html.PartialAsync("pvwSalesOrder", new ERPMVC.DTO.SalesOrderDTO { SalesOrderId = 0, OrderDate = DateTime.Now, DeliveryDate = DateTime.Now, ExpirationDate = DateTime.Now.AddDays(30)
  , BranchId = Convert.ToInt32(Context.Session.GetString("BranchId"))
    })
</div>*@

<script>

    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridCotizaciones").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridCotizaciones").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    setToolbarTooltip(".k-grid-Agregar", "Agregar un nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-GenerarContrato", "Generar un contrato!");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
    setRowButtonTooltip(".k-grid-Aprobar", "Aprobar Cotización");
    setRowButtonTooltip(".k-grid-CrearCliente", "Crear cliente");

</script>



<div id="ConditionView">
    @*  @await Html.PartialAsync("~/Views/Conditions/pvwConditions.cshtml", new ERPMVC.Models.Conditions { ConditionId = 0 });*@
</div>

<div id="CustomerConditionView">
</div>
