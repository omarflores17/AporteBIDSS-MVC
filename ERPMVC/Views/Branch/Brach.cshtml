@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Sucursales";
}

<script>

    function Agregar() {

         var dataObject = {
             BranchId: 0
        };

        $.ajax({
            url: '@Url.Action("pvwAddBranch", "Branch")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#NumBranch").html('');
                $("#NumBranch").html(result);


                //$("#btnCAI").hide();
                $('#ModalBranch').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 swal("Error", textStatus, "error");
              }
        });


    }

         function EditBranch(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                BranchId: dataItem.BranchId,
                editar : 0
             };

            $.ajax({
                url: '@Url.Action("pvwAddBranch", "Branch")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumBranch").html('');
                    $("#NumBranch").html(result);


                    //$("#btnCAI").hide();
                    $('#ModalBranch').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }


    //funcion para eliminar
    function Delete(e) {
        if (confirm('¿Seguro que quiere eliminar este registro?')) {
            debugger
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            $.ajax({
               url: '@Url.Action("Delete", "Branch")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                //data: { Id: dataItem.UnitOfMeasureId },
                success: function (data) {
                    var grid = $("#gridNumeracionBranch").data("kendoGrid");
                    grid.dataSource.remove(dataItem);
                    swal("Sucursal", "Eliminada con éxito", "success");
                    $("#titulo").text("Eliminar Sucursal");
                },
                 error: function (XMLHttpRequest, textStatus, errorThrown) {
                     swal("Error", "No se puede eliminar sucursal ya que possee transacciones realizadas", "error");
                  }
            });
        }
    }

</script>

<h3 class="text-themecolor">Sucursales</h3>
@(Html.Kendo().Grid<ERPMVC.Models.Branch>
                        ()
                        .Name("gridNumeracionBranch")
                        .Columns(columns =>
                        {
                            columns.Command(command =>
                            {
                                //command.Custom("Ver detalles").Click("Detalles");
                                command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditBranch");
                                command.Custom("Eliminar").Click("Delete").IconClass("fa fa-trash").Text(" ");
                            }).Width(190).Title("Acciones");
                            columns.Bound(p => p.BranchId).Width(70).Title("No");
                            columns.Bound(p => p.BranchName).Width(200);
                //columns.Bound(p => p.Description).Width(150);
                //columns.Bound(p => p.CurrencyName).Width(150);
                //columns.Bound(p => p.ZipCode).Width(150).Visible(false);
                columns.Bound(p => p.Phone).Width(100).Title("Teléfono");
                //columns.Bound(p => p.Email).Width(250);
                columns.Bound(p => p.EmployeeId).Hidden(true).Width(200).Title("Encargado");
                            columns.Bound(p => p.Employee.NombreEmpleado).Width(200).Title("Encargado");
                            columns.Bound(p => p.Departamento.Name).Width(200).Title("Departamento");
                            //columns.Bound(p => p.Estado).Width(100);
                //columns.Bound(p => p.Address).Width(300);
                //columns.Bound(p => p.City).Width(200);
                //columns.Bound(p => p.UsuarioCreacion).Width(250);
                //columns.Bound(p => p.UsuarioModificacion).Width(250);
                //columns.Bound(p => p.FechaCreacion).Format("{0:dd/MM/yyyy}").Width(450);
                //columns.Bound(p => p.FechaModificacion).Format("{0:dd/MM/yyyy}").Width(450);



            })
                            .Filterable(f => f.Operators(o => o.ForString(s => s
                                                   .Clear()
                                                   .Contains("Contiene")
                                                   .DoesNotContain("No contiene")
                                                   .EndsWith("Termina con")
                                                   .IsEqualTo("Es igual a")
                                                   .IsNotEqualTo("No es igual a")
                                                   .IsNull("Es nulo")
                                                   .StartsWith("Inicia con")


                                             )
                                             .ForNumber(n => n
                                               .Clear()
                                               .IsEqualTo("Es igual a")
                                               .IsGreaterThan("Es mayor que")
                                               .IsLessThan("Es menor que")
                                               .IsNull("Es nulo")
                                               .IsLessThanOrEqualTo("Es menor o igual que")
                                               .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                             )
                                             .ForDate(d => d
                                             .Clear()
                                             .IsEqualTo("Es igual que")
                                             .IsGreaterThan("Es mayor que")
                                             .IsLessThan("Es menor que")
                                             .IsLessThanOrEqualTo("Es menor o igual que")
                                             .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                             .IsNotEqualTo("No es igual que")
                                              )
                                           ))
                        .ToolBar(tools =>
                        {
                // tools.Create();
                tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                       .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "Agregar()" });
                            tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                            tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                        })
                        .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
                        .Sortable()
                        .Pageable()
                        .Filterable()
                        .Scrollable()
                        .Pdf(pdf => pdf.FileName("BranchReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                        .ProxyURL(Url.Action("Export", "Home")).AllPages())
                            .Excel(excel => excel.FileName("BranchReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                        .DataSource(dataSource =>
                            dataSource
                            .WebApi()

                            .ServerOperation(true)
                            .Model(model =>
                            {
                                model.Id(p => p.BranchId);
                                model.Field(p => p.BranchId).Editable(false);
                                model.Field(p => p.FechaCreacion).Editable(true);
                                model.Field(p => p.UsuarioCreacion).Editable(false);
                                model.Field(p => p.UsuarioModificacion).Editable(false);

                            })
                            .Events(events => events.Error("error_handler"))
                            .Read(read => read.Action("GetBranch", "Branch"))
                            .Create(create => create.Action("Insert", "Branch"))
                            .Update(update => update.Action("Update", "Branch", new { BranchId = "{0}" }).Type(HttpVerbs.Put))
                            .Destroy(destroy => destroy.Action("Delete", "Branch", new { BranchId = "{0}" }).Type(HttpVerbs.Delete))

                        )

)

<script>
    //para los tools tips
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridNumeracionBranch").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridNumeracionBranch").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");

    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir");
    setRowButtonTooltip(".k-grid-ImprimirBoletaDeSalida", "Imprimir Boleta de salida");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>

<div id="NumBranch">
    @await Html.PartialAsync("pvwAddBranch", new ERPMVC.DTO.BranchDTO { BranchId = 0 })
</div>