@{ 
    ViewData["Title"] = "Unidades de Medida";
}
<script>

    //-- Agregar --
    
    function AgregarUoM() {

         var dataObject = {
             UnitOfMeasureId: 0
        };

        $.ajax({
            url: '@Url.Action("pvwModalUnidad", "UnitOfMeasure")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#unitofmeasure").html('');
                $("#unitofmeasure").html(result);
                //$("#btnGuardarUoM").show();
                $("#titulo").text("Agregar Nueva Unidad");

                //Mostrar modal con la información
                $('#UoModal').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 swal("Error", textStatus, "error");
              }
        });


    }

    //-- Editar --
    function EditUoM(e) {
        e.preventDefault();
        
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            UnitOfMeasureId: dataItem.UnitOfMeasureId
        };
        $.ajax({
            url: '@Url.Action("pvwModalUnidad", "UnitOfMeasure")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            //data: { Id: dataItem.UnitOfMeasureId },
            success: function (result) {
                $("#unitofmeasure").html('');
                $("#unitofmeasure").html(result);
                $("#titulo").text("Editar Unidad");
                //Mostrar modal con la información
                $('#UoModal').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 swal("Error", textStatus, "error");                         
              }
        });
    }




    function RefrescarGrid() {
        var grid = $("#gridUoM").getKendoGrid();
        grid.dataSource.read();

    }
</script>

<h3 class="text-themecolor">Unidades de Medida</h3>


@(Html.Kendo().Grid<ERPMVC.Models.UnitOfMeasure>()
                          .Name("gridUoM")
                          .Columns(columns =>
                          {
                              columns.Command(command =>
                              {
                      //command.Custom("Ver detalles").Click("Detalles");
                      command.Custom("Editar").Click("EditUoM");
                              }).Width(100);
                              columns.Bound(p => p.UnitOfMeasureId).Width(100).Title("No").Visible(false);
                              columns.Bound(p => p.UnitOfMeasureName).Width(150).Title("Unidad de Medida");
                              columns.Bound(p => p.Description).Width(200).Title("Descripcion");
                              columns.Bound(p => p.Estado).Width(160).Visible(false);
                              columns.Bound(p => p.FechaModificacion).Format("{0:dd/MM/yyyy}").Width(150);
                  //columns.Bound(p => p.ConcurrencyStamp).Width(150);

              })
                              .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))
                          .ToolBar(tools =>
                          {
                              tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus").HtmlAttributes(new { @onclick = "AgregarUoM();" });
                  //tools.Excel().HtmlAttributes(new { @class = "toolbar-field" });
                  //tools.Pdf().HtmlAttributes(new { @class = "toolbar-field" });


              })
                           .Editable(e => e.Mode(GridEditMode.PopUp))
                           .Sortable()
                           .Pageable()
                           .Filterable()
                           .Scrollable()
                           .Pdf(pdf => pdf.FileName("UnitOfMeasureReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                           + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                           .ProxyURL(Url.Action("Export", "Home")).AllPages())
                             .Excel(excel => excel.FileName("UnitOfMeasureReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                           + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                           .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                           .DataSource(dataSource =>
                              dataSource
                                .WebApi()
                                .ServerOperation(true)
                                .Model(model =>
                                {
                                    model.Id(p => p.UnitOfMeasureId);
                                    model.Field(p => p.UnitOfMeasureId).Editable(false);


                                })
                                .Events(events => events.Error("error_handler"))
                                .Read(read => read.Action("GetUnitOfMeasure", "UnitOfMeasure"))
                                .Create(create => create.Action("Insert", "UnitOfMeasure"))
                                .Update(update => update.Action("Update", "UnitOfMeasure", new { id = "{0}" }))
                                .Destroy(destroy => destroy.Action("Delete", "UnitOfMeasure", new { id = "{0}" }))
                          )
)
<div id="unitofmeasure" >
    @await Html.PartialAsync("pvwModalUnidad", new ERPMVC.Models.UnitOfMeasure())
</div>
