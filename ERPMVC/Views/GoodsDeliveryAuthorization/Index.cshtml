@using Microsoft.AspNetCore.Http;

<script>

      $(document).ready(function () {
          clearsessiondeliveryautor();
    });


    function clearsessiondeliveryautor() {
           var dataObject = ["listadoproductosGoodsDeliveryAuthorization"];
         $.ajax({
            url: '@Url.Action("ClearSession","Common")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                  //  $('#myModalSalesOrder').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
         });
    }

    function AddGoodsDeliveryAuthorization() {


         var dataObject = {
             GoodsDeliveryAuthorizationId: 0,
             editar : 1
        };

        clearsessiondeliveryautor();

        $.ajax({
            url: '@Url.Action("pvwGoodsDeliveryAuthorization", "GoodsDeliveryAuthorization")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#GoodsDeliveryAuthorization").html('');
                $("#GoodsDeliveryAuthorization").html(result);

                //RefreshCotizacionesDetail();
                 //$("#btnSaveCotizacion").show();
                $('#myModalGoodsDeliveryAuthorization').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });


    }

    function EditGoodsDeliveryAuthorization(e) {
         e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            GoodsDeliveryAuthorizationId: dataItem.GoodsDeliveryAuthorizationId,
            editar : 0
        };

        clearsessiondeliveryautor();

        $.ajax({
            url: '@Url.Action("pvwGoodsDeliveryAuthorization", "GoodsDeliveryAuthorization")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#GoodsDeliveryAuthorization").html('');
                $("#GoodsDeliveryAuthorization").html(result);
                var customer = $("#CustomerId").val();
                $("#CustomerId").val(0);
                $("#CustomerId").data("kendoDropDownList").select(customer);
                $("#CustomerId").data("kendoDropDownList").value(customer);

                hcustom = customer;
                GetProductTypeIdS();
                $("#SubProductId").data("kendoDropDownList").dataSource.read();
               // var sapProject = $("#CustomerId").data("kendoDropDownList").bind("select", onChange(customer));
                fiscal();
                $('#myModalGoodsDeliveryAuthorization').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
              }
        });
    }

    function onChange(CustomerId) {
        $("#CustomerId").val(CustomerId);
    }

    function ImprimirGoodsDeliveryAuthorization(e) {
        e.preventDefault();
        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));

        @*var url = '@Url.Action("SFGoodsDeliveryAuthorization", "GoodsDeliveryAuthorization")/' + dataItem.GoodsDeliveryAuthorizationId;*@
        var url = './SFGoodsDeliveryAuthorization/' + dataItem.GoodsDeliveryAuthorizationId;
      //  console.log(url);
           var win = window.open(url, '_blank');
           win.focus();

    }




    function closecondition() {
        $('#myModalConditions').modal('hide');
    }


</script>

<h3 class="text-themecolor">Autorización entrega de mercadería</h3>

@(Html.Kendo().Grid<ERPMVC.Models.GoodsDeliveryAuthorization>()
                                  .Name("gridGoodsDeliveryAuthorization")
                                  .Columns(columns =>
                                  {
                                      columns.Command(command =>
                                      {
                                          command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditGoodsDeliveryAuthorization");
                                          command.Custom("Imprimir").Text(" ").IconClass("fa fa-print").Click("ImprimirGoodsDeliveryAuthorization");
                                          // command.Custom("Imprimir").Text(" ").IconClass("fa fa-times-circle").Click("ImprimirGoodsDeliveryAuthorization");

                                          //  command.Edit(); command.Destroy();
                                      }).Width(250);

                                      columns.Bound(p => p.GoodsDeliveryAuthorizationId).Title("Id").Width(150);
                                      columns.Bound(p => p.DocumentDate).Format("{0:dd/MM/yyyy}").ClientTemplate("#=kendo.toString(DocumentDate,'dd/MM/yyyy')#").Title("Fecha Documento").Width(150);
                                      //columns.Bound(p => p.OrderDate).Format("{0:dd/MM/yyyy}").Width(150);
                                      columns.Bound(p => p.Name).Width(150);
                                      columns.Bound(p => p.ProductId).Title("Producto").Width(150);
                                      columns.Bound(p => p.ProductName).Title("Descripcion").Width(150);
                                      columns.Bound(p => p.BranchName).Title("Sucursal").Width(150);
                                      //columns.Bound(p => p.BranchId).Title("Branch Id").Width(150);
                                      // columns.Bound(p => p.WareHouseName).Title("Bodega").Width(150);
                                      //  columns.Bound(p => p.ExitTicket).Title("Ticket de salida").Width(150);
                                      // columns.Bound(p => p.Reference).Title("Referencia").Width(150);

                                  })
                                  .Filterable(f => f.Operators(o => o.ForString(s => s
                                           .Clear()
                                           .Contains("Contiene")
                                           .DoesNotContain("No contiene")
                                           .EndsWith("Termina con")
                                           .IsEqualTo("Es igual a")
                                           .IsNotEqualTo("No es igual a")
                                           .IsNull("Es nulo")
                                           .StartsWith("Inicia con")


                                     )
                                     .ForNumber(n => n
                                       .Clear()
                                       .IsEqualTo("Es igual a")
                                       .IsGreaterThan("Es mayor que")
                                       .IsLessThan("Es menor que")
                                       .IsNull("Es nulo")
                                       .IsLessThanOrEqualTo("Es menor o igual que")
                                       .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     )
                                     .ForDate(d => d
                                     .Clear()
                                     .IsEqualTo("Es igual que")
                                     .IsGreaterThan("Es mayor que")
                                     .IsLessThan("Es menor que")
                                     .IsLessThanOrEqualTo("Es menor o igual que")
                                     .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                     .IsNotEqualTo("No es igual que")
                                      )
                                   ))

                                  .ToolBar(tools =>
                                  {
                                      //tools.Create();
                                      tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                       .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddGoodsDeliveryAuthorization();" });

                                      tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                                      tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });

                                  })
                                   .Editable(e => e.Mode(GridEditMode.PopUp))
                                    .Sortable()
                                    .AutoBind(true)
                                    .Pageable()
                                    .Filterable()
                                    .Scrollable()
                                    // .ClientDetailTemplateId("template")
                                    .Pdf(pdf => pdf.FileName("GoodsDeliveryAuthorizationReport" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                                      .Excel(excel => excel.FileName("GoodsDeliveryAuthorizationReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                                    //.Events(e=>e.Save("onsave"))
                                    .DataSource(dataSource =>

                                   dataSource
                                   //.Ajax()
                                   .WebApi()
                                    .ServerOperation(true)
                                    .Model(model =>
                                    {
                                        model.Id(p => p.GoodsDeliveryAuthorizationId);
                                        model.Field(p => p.GoodsDeliveryAuthorizationId).Editable(true);
                                        model.Field(p => p.CustomerId).Editable(true);


                                    })
                                    .Events(events =>
                                    {
                                        events.Error("error_handler");
                                        //events.upda("EditHandler");

                                    })
                                    .Read(read => read.Action("Get", "GoodsDeliveryAuthorization"))
                                    .Create(create => create.Action("Insert", "GoodsDeliveryAuthorization"))
                                    .Update(update => update.Action("Update", "GoodsDeliveryAuthorization", new { id = "{0}" }))
                                    .Destroy(destroy => destroy.Action("Delete", "GoodsDeliveryAuthorization", new { id = "{0}" }))
                              )
)

<div id="GoodsDeliveryAuthorization">
    @await Html.PartialAsync("pvwGoodsDeliveryAuthorization", new ERPMVC.DTO.GoodsDeliveryAuthorizationDTO { GoodsDeliveryAuthorizationId = 0, DocumentDate = DateTime.Now, AuthorizationDate = DateTime.Now, BranchId = Convert.ToInt64(Context.Session.GetString("BranchId")) })
</div>




<div id="ConditionView">
</div>

<div id="CustomerConditionView">
</div>
