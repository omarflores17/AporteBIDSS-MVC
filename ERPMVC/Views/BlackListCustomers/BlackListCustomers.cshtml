@using Kendo.Mvc.UI

@{
    ViewData["Title"] = "Lista Negra de Clientes";
}

<script>

    function onsave(e) {
    }

    function caidata(data) {
        data.FechaRecepcion = data.FechaRecepcion.toISOString('yyyy-MM-dd');
        data.FechaLimiteEmision = data.FechaLimiteEmision.toISOString('yyyy-MM-dd');
    }

    function AddBlackList() {

          $('#ModalBlackListCustomers').find(':input').not(':submit').val('');
          $('#ModalBlackListCustomers').modal('show');
          $("#BlackListId").val('0');
    }


         function EditBlackList(e) {
             e.preventDefault();
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            var dataObject = {
                BlackListId: dataItem.BlackListId,
                editar : 0
            };

            $.ajax({
                url: '@Url.Action("pvwAddBlackList", "BlackListCustomers")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataObject),
                success: function (result) {
                    $("#NumBlackListCustomers").html('');
                    $("#NumBlackListCustomers").html(result);


                    //$("#btnBlackListCustomers").hide();
                    $('#ModalBlackListCustomers').modal('show');
                },
                error: function (XMLHttpRequest, textStatus, errorThrown) {
                    alert(textStatus + ": " + XMLHttpRequest.responseText);
                }
            });
         }

      //funcion para eliminar
    function Delete(e) {
        if (confirm('¿Seguro que quiere eliminar este registro?')) {
            debugger
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            $.ajax({
               url: '@Url.Action("Delete", "BlackListCustomers")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                //data: { Id: dataItem.UnitOfMeasureId },
                success: function (data) {
                    var grid = $("#gridBlackListCustomers").data("kendoGrid");
                    grid.dataSource.remove(dataItem);
                    $("#titulo").text("Eliminar Cliente");
                },
                 error: function (XMLHttpRequest, textStatus, errorThrown) {
                     swal("Error", "No se puede eliminar el cliente esta activo", "error");
                  }
            });
        }
    }

</script>

<h3 class="text-themecolor">Lista Negra de Clientes</h3>
@(Html.Kendo().Grid<ERPMVC.Models.BlackListCustomers>
                    ()
                    .Name("gridBlackListCustomers")
                    .Columns(columns =>
                    {

                        columns.Command(command =>
                        {
                            command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditBlackList");
                            command.Custom("Eliminar").Click("Delete").IconClass("fa fa-trash").Text(" ");
                        }).Width(180).Title("Acciones");

                        columns.Bound(p => p.BlackListId).Width(100).Title("N°");
                        columns.Bound(p => p.CustomerName).Width(200);
                        columns.Bound(p => p.CustomerReference).Width(150).Visible(false);
                        columns.Bound(p => p.Alias).Width(150).Visible(false);
                        columns.Bound(p => p.Identidad).Width(200);
                        columns.Bound(p => p.RTN).Width(200);
                        columns.Bound(p => p.Referencia).Width(200).Visible(false);
                        columns.Bound(p => p.Origen).Width(200).Visible(false);
                        columns.Bound(p => p.DocumentDate).Format("{0:dd/MM/yyyy}").Width(150);
                        columns.Bound(p => p.Estado).Width(150);




                    })
                        .Filterable(f => f.Operators(o => o.ForString(s => s
                                               .Clear()
                                               .Contains("Contiene")
                                               .DoesNotContain("No contiene")
                                               .EndsWith("Termina con")
                                               .IsEqualTo("Es igual a")
                                               .IsNotEqualTo("No es igual a")
                                               .IsNull("Es nulo")
                                               .StartsWith("Inicia con")


                                         )
                                         .ForNumber(n => n
                                           .Clear()
                                           .IsEqualTo("Es igual a")
                                           .IsGreaterThan("Es mayor que")
                                           .IsLessThan("Es menor que")
                                           .IsNull("Es nulo")
                                           .IsLessThanOrEqualTo("Es menor o igual que")
                                           .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         )
                                         .ForDate(d => d
                                         .Clear()
                                         .IsEqualTo("Es igual que")
                                         .IsGreaterThan("Es mayor que")
                                         .IsLessThan("Es menor que")
                                         .IsLessThanOrEqualTo("Es menor o igual que")
                                         .IsGreaterThanOrEqualTo("Es mayor o igual que")
                                         .IsNotEqualTo("No es igual que")
                                          )
                                       ))
                    .ToolBar(tools =>
                    {
                        // tools.Create();
                        tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus")
                                                           .HtmlAttributes(new { @class = "k-i-plus-sm", onclick = "AddBlackList()" });
                        tools.Excel().Text("Exportar a excel").HtmlAttributes(new { @class = "toolbar-field" });
                        tools.Pdf().Text("Exportar a pdf").HtmlAttributes(new { @class = "toolbar-field" });



                    })
                    .Editable(e => e.Mode(GridEditMode.PopUp))
                    .Sortable()
                    .Pageable()
                    .Filterable()
                    .Scrollable()
                    .Pdf(pdf => pdf.FileName("ListaNegraClienteReporte" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
                    .ProxyURL(Url.Action("Export", "Home")).AllPages())
                        .Excel(excel => excel.FileName("ListaNegraClienteReporte_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
                    + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
                    .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
                    .DataSource(dataSource =>
                        dataSource
                        .WebApi()

                        .ServerOperation(true)
                        .Model(model =>
                        {
                            model.Id(p => p.BlackListId);
                            model.Field(p => p.BlackListId).Editable(false);
                            model.Field(p => p.FechaCreacion).Editable(true);
                            model.Field(p => p.UsuarioCreacion).Editable(false);
                            model.Field(p => p.UsuarioModificacion).Editable(false);

                        })
                        .Events(events => events.Error("error_handler"))
                        .Read(read => read.Action("Get", "BlackListCustomers"))
                        .Create(create => create.Action("Insert", "BlackListCustomers"))
                        .Update(update => update.Action("Update", "BlackListCustomers").Type(HttpVerbs.Put))
                        .Destroy(destroy => destroy.Action("Delete", "BlackListCustomers").Type(HttpVerbs.Post))

                    )
                    .Events(e =>
                    {
                        e.Save("onsave");

                    })
)

<script>
    //para los tools tips
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridBlackListCustomers").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridBlackListCustomers").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setToolbarTooltip(".k-grid-Agregar", "Agregar nuevo registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar registro");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir registro");
    setRowButtonTooltip(".k-grid-ImprimirBoletaDeSalida", "Imprimir Boleta de salida");
    setRowButtonTooltip(".k-grid-Editar", "Editar registro");
</script>
<div id="NumBlackListCustomers">
    @await Html.PartialAsync("pvwAddBlackList", new ERPMVC.DTO.BlackListCustomersDTO { BlackListId = 0, DocumentDate = DateTime.Now })
</div>