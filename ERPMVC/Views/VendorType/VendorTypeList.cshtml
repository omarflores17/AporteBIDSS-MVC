@using Kendo.Mvc.UI
@{
    ViewData["Title"] = "Tipos de Proveedores";
}
<script>

    //-- Agregar --

    function AgregarUoM() {

         var dataObject = {
             VendorTypeId: 0
        };

        $.ajax({
            url: '@Url.Action("pvwModalVendorType", "VendorType")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            success: function (result) {
                $("#unitofmeasure").html('');
                $("#unitofmeasure").html(result);
                //$("#btnGuardarUoM").show();
                $("#titulo").text("Agregar Tipo Proveedor");

                //Mostrar modal con la información
                $('#UoModal').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 swal(textStatus + ": " + XMLHttpRequest.responseText + textStatus);
             }
        });


    }

    //-- Editar --
    function EditUoM(e) {
        e.preventDefault();

        var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
        var dataObject = {
            VendorTypeId: dataItem.VendorTypeId
        };
        $.ajax({
            url: '@Url.Action("pvwModalVendorType", "VendorType")',
            method: 'POST',
            datatype: "json",
            contentType: 'application/json',
            async: false,
            data: JSON.stringify(dataObject),
            //data: { Id: dataItem.UnitOfMeasureId },
            success: function (result) {
                $("#unitofmeasure").html('');
                $("#unitofmeasure").html(result);
                $("#titulo").text("Editar Tipo Proveedor");
                //Mostrar modal con la información
                $('#UoModal').modal('show');
            },
             error: function (XMLHttpRequest, textStatus, errorThrown) {
                 swal("Error", textStatus, "error");
              }
        });
    }




    function RefrescarGrid() {
        var grid = $("#gridUoM").getKendoGrid();
        grid.dataSource.read();

    }
    
    //funcion para eliminar
    function Delete(e) {
        if (confirm("¿Seguro que quiere eliminar este registro?")) {
            debugger
            var dataItem = this.dataItem($(e.currentTarget).closest("tr"));
            $.ajax({
               url: '@Url.Action("Delete", "VendorType")',
                method: 'POST',
                datatype: "json",
                contentType: 'application/json',
                async: false,
                data: JSON.stringify(dataItem),
                //data: { Id: dataItem.UnitOfMeasureId },
                success: function (data) {
                    var grid = $("#gridUoM").data("kendoGrid");
                    grid.dataSource.remove(dataItem);
                    $("#titulo").text("Eliminar Tipo Proveedor");
                },
                 error: function (XMLHttpRequest, textStatus, errorThrown) {
                     swal("Error" + " "+textStatus + ": " +  XMLHttpRequest.responseText);
                }
            });
        }
    }

</script>

<h3 class="text-themecolor">Tipos Proveedor</h3>


@(Html.Kendo().Grid<ERPMVC.Models.VendorType>
        ()
        .Name("gridUoM")
        .Columns(columns =>
        {
            columns.Command(command =>
            {
    //command.Custom("Ver detalles").Click("Detalles");
    command.Custom("Editar").Text(" ").IconClass("fa fa-edit").Click("EditUoM");
                command.Custom("Eliminar").Click("Delete").IconClass("fa fa-trash").Text(" ");
            }).Width(100).Title("Acciones");
            columns.Bound(p => p.VendorTypeId).Width(100).Title("No");
            columns.Bound(p => p.VendorTypeName).Width(150).Title("Tipo Proveedor");
            columns.Bound(p => p.Description).Width(200).Title("Descripción");
            columns.Bound(p => p.UsuarioCreacion).Width(160).Visible(false);
            columns.Bound(p => p.FechaCreacion).Title("Fecha Creación").Format("{0:dd/MM/yyyy}").Width(150).Visible(false);
//columns.Bound(p => p.ConcurrencyStamp).Width(150);

})
        .Filterable(f => f.Operators(o => o.ForString(s => s
        .Clear()
        .Contains("Contiene")
        .DoesNotContain("No contiene")
        .EndsWith("Termina con")
        .IsEqualTo("Es igual a")
        .IsNotEqualTo("No es igual a")
        .IsNull("Es nulo")
        .StartsWith("Inicia con")


        )
        .ForNumber(n => n
        .Clear()
        .IsEqualTo("Es igual a")
        .IsGreaterThan("Es mayor que")
        .IsLessThan("Es menor que")
        .IsNull("Es nulo")
        .IsLessThanOrEqualTo("Es menor o igual que")
        .IsGreaterThanOrEqualTo("Es mayor o igual que")
        )
        .ForDate(d => d
        .Clear()
        .IsEqualTo("Es igual que")
        .IsGreaterThan("Es mayor que")
        .IsLessThan("Es menor que")
        .IsLessThanOrEqualTo("Es menor o igual que")
        .IsGreaterThanOrEqualTo("Es mayor o igual que")
        .IsNotEqualTo("No es igual que")
        )
        ))
        .ToolBar(tools =>
        {
            tools.Custom().Text("Agregar").IconClass("k-icon k-i-plus").HtmlAttributes(new { @onclick = "AgregarUoM();" });
            tools.Excel().Text("Exportar Excel").HtmlAttributes(new { @class = "toolbar-field" });
            tools.Pdf().Text("Exportar PDF").HtmlAttributes(new { @class = "toolbar-field" });


})
        .Editable(e => e.Mode(GridEditMode.PopUp).ConfirmDelete("¿Esta seguro que desea eliminar este registro?"))
        .Sortable()
        .Pageable()
        .Filterable()
        .Scrollable()
        .Pdf(pdf => pdf.FileName("VendorTypeReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".pdf")
        .ProxyURL(Url.Action("Export", "Home")).AllPages())
        .Excel(excel => excel.FileName("VendorTypeReport_" + DateTime.Now.Year + "_" + DateTime.Now.Month + "_"
        + DateTime.Now.Day + "_" + DateTime.Now.Hour + "_" + DateTime.Now.Minute + "_" + DateTime.Now.Second + ".xlsx").Filterable(true)
        .ProxyURL(Url.Action("Export", "Home")).AllPages(true))
        .DataSource(dataSource =>
        dataSource
        .WebApi()
        .ServerOperation(true)
        .Model(model =>
        {
            model.Id(p => p.VendorTypeId);
            model.Field(p => p.VendorTypeId).Editable(false);


        })
        .Events(events => events.Error("error_handler"))
        .Read(read => read.Action("GetVendorType", "VendorType"))
        .Create(create => create.Action("Insert", "VendorType"))
        .Update(update => update.Action("Update", "VendorType", new { id = "{0}" }))
        //.Destroy(destroy => destroy.Action("Delete", "VendorType", new { id = "{0}" }).Type(HttpVerbs.Post))

        )
)
<div id="unitofmeasure">
    @await Html.PartialAsync("pvwModalVendorType", new ERPMVC.Models.VendorType())
</div>
<script>
    //para los tools tips
    function setToolbarTooltip(btn_cl, btn_tooltip) {
        $("#gridUoM").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }

    function setRowButtonTooltip(btn_cl, btn_tooltip) {
        $("#gridUoM").kendoTooltip({
            filter: btn_cl,
            content: btn_tooltip
        });
    }
    setToolbarTooltip(".k-grid-Agregar", "Agregar Nuevo Registro");
    //setRowButtonTooltip(".k-grid-edit", "Tooltip for Edit button");
    setRowButtonTooltip(".k-grid-Eliminar", "Eliminar Registro");
    setRowButtonTooltip(".k-grid-Imprimir", "Imprimir");
    setRowButtonTooltip(".k-grid-ImprimirBoletaDeSalida", "Imprimir Boleta de salida");
    setRowButtonTooltip(".k-grid-Editar", "Editar Registro");
</script>